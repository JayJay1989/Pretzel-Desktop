import * as React from 'react';
import { flowRight as compose } from 'lodash';
import { PlayerContext, withPlayerContext } from './PlayerContext';
import { ActiveBar } from './Components/ActiveBar';
import { AlbumArt } from './Components/AlbumArt/AlbumArt';
import { TrackProgress } from './Components/TrackProgress/TrackProgress';
import { TrackInfo } from './Components/TrackInfo/TrackInfo';
import { PlayerControls } from './Components/PlayerControls/PlayerControls';
import { Settings } from './Components/PlayerControls/Components/Settings/Settings';
import { Box } from 'grommet';
import { PlayTokenFragment } from './Queries/types/PlayTokenFragment';
import { ActiveSegmentFragment } from './Queries/types/ActiveSegmentFragment';
import { ControlItem } from './Components/PlayerControls/Components/ControlItem/ControlItem';
import { Wrapper } from './Components/PlayerControls/Styles';
import { AnalyticsEventType } from '../Analytics';
import { withMutation } from '@apollo/client/react/hoc';
import { loader } from 'graphql.macro';
import { Mutation } from '../GraphQL';
import {
  SetTrackBlacklistedInput,
  SetTrackBlacklistedMutation,
  SetTrackLikedInput,
  SetTrackLikedMutation,
} from './Components/PlayerControls/schema';

const likeTrackMutation = loader('./Queries/set-track-liked.graphql');
const blacklistTrackMutation = loader('./Queries/set-track-blacklisted.graphql');

interface GraphQLProps {
  likeTrack: Mutation<SetTrackLikedInput, SetTrackLikedMutation>;
  dislikeTrack: Mutation<SetTrackBlacklistedInput, SetTrackBlacklistedMutation>;
}

type Props = PropsFromContext & GraphQLProps;

interface State {
  loadingLike: boolean;
  loadingDislike: boolean;
}

export class HorizontalPlayerPresentation extends React.Component<Props, State> {
  state = {
    loadingLike: false,
    loadingDislike: false,
  };

  public render() {
    const { playToken } = this.props;
    return (
      <Box direction="row" justify="between" fill>
        <Box alignSelf="center" width="280px">
          <Settings />
        </Box>
        <Box flex="grow" pad={{ horizontal: '24px' }}>
          <ActiveBar segment={this.props.activeSegment} />
          <TrackProgress />
          <PlayerControls />
        </Box>
        <Box direction="row" width="330px" align="center">
          <Box width="50px" flex={{ shrink: 0 }}>
            <ControlItem
              isLoading={this.state.loadingLike}
              isDisabled={this.props.loadingNext}
              active={playToken && playToken.track.self.liked}
              name="thumbs_up"
              onClick={this.handleLike}
            />
            <ControlItem
              isLoading={this.state.loadingDislike}
              isDisabled={this.props.loadingNext}
              active={playToken && playToken.track.self.blacklisted}
              name="thumbs_down"
              onClick={this.handleDislike}
            />
          </Box>
          <Box width="85px" height="85px" flex={{ shrink: 0 }}>
            <AlbumArt playToken={this.props.playToken} />
          </Box>
          <TrackInfo />
        </Box>
      </Box>
    );
  }

  private handleLike = (event: React.MouseEvent<HTMLButtonElement>) => {
    // @ts-ignore
    event.target.parentElement.blur();
    if (this.props.playToken) {
      this.setState({ loadingLike: true });
      this.props
        .likeTrack({
          variables: {
            trackId: this.props.playToken.track.id,
            value: !this.props.playToken.track.self.liked,
          },
        })
        .then(() => this.setState({ loadingLike: false }))
        .catch(() => this.setState({ loadingLike: false }));
      this.props.sendAnalyticsEvent(AnalyticsEventType.Like, this.props.playToken, 'playerControls');
    }
  };

  private handleDislike = (event: React.MouseEvent<HTMLElement>) => {
    // @ts-ignore
    event.target.parentElement.blur();
    if (this.props.playToken) {
      this.setState({ loadingDislike: true });
      this.props
        .dislikeTrack({
          variables: {
            trackId: this.props.playToken.track.id,
            value: !this.props.playToken.track.self.blacklisted,
          },
        })
        .then(() => {
          this.setState({ loadingDislike: false });
          this.props.next();
        })
        .catch(() => this.setState({ loadingDislike: false }));
      this.props.sendAnalyticsEvent(AnalyticsEventType.Dislike, this.props.playToken, 'playerControls');
    }
  };
}

type PropsFromContext = Pick<
  PlayerContext,
  'playToken' | 'activeSegment' | 'sendAnalyticsEvent' | 'loadingNext' | 'next'
>;

function mapContextToProps(c: PlayerContext): PropsFromContext {
  return {
    loadingNext: c.loadingNext,
    next: c.next,
    playToken: c.playToken,
    activeSegment: c.activeSegment,
    sendAnalyticsEvent: c.sendAnalyticsEvent,
  };
}

export const HorizontalPlayer = compose(
  withPlayerContext(mapContextToProps),
  withMutation(likeTrackMutation, { name: 'likeTrack' }),
  withMutation(blacklistTrackMutation, { name: 'dislikeTrack' }),
  // @ts-ignore Just need to move to hooks for these so that typing isn't so fucked up.
)(HorizontalPlayerPresentation);

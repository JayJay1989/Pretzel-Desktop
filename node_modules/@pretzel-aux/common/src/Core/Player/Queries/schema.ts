export interface AudioUrls {
  normal: string;
  high?: string;
  veryHigh?: string;
  low?: string;
}

export interface Segment {
  __typename: string;
  id: string;
  name: string;
}

export interface Album {
  id: string;
  title: string;
}

export interface Artist {
  __typename: string;
  id: string;
  name: string;
}

export interface BasicTrackSelf {
  liked: boolean;
  blacklisted: boolean;
}
export interface PlayTokenTrackSelf {
  audioUrls: AudioUrls;
}

export interface BasicTrack {
  id: string;
  title: string;
  duration: number;
  artworkGuid: string;
  artists: Artist[];
  album: Album | null;
  self: BasicTrackSelf;
  explicit?: boolean;
  youtubeSafe?: boolean;
  instrumental?: boolean;
}

export interface PlayTokenTrack extends BasicTrack {
  self: BasicTrackSelf & PlayTokenTrackSelf;
}

export enum PlayTokenSourceKind {
  DEFAULT = 'DEFAULT',
  REPLAY = 'REPLAY',
  QUEUED = 'QUEUED',
  SONG_REQUEST = 'SONG_REQUEST',
  PLAYLIST = 'PLAYLIST',
  STATION = 'STATION',
  ARTIST = 'ARTIST',
  ALBUM = 'ALBUM',
  LABEL = 'LABEL',
}

export function isSongRequest(
  details: SegmentSourceDetails | SongRequestSourceDetails,
): details is SongRequestSourceDetails {
  return (details as SongRequestSourceDetails).songRequest !== undefined;
}

export interface SegmentSourceDetails {
  __typename: string;
}

export interface Requester {
  bitTotal: number;
  displayName: string;
}

export interface SongRequest {
  id: string;
  bitTotal: number;
  leaderName: string;
  others: number;
  requesters: Requester[];
}

export interface SongRequestSourceDetails {
  __typename: string;
  songRequest: SongRequest;
}

export interface PlayTokenSource {
  guid: string;
  name: string;
  kind: PlayTokenSourceKind;
  details: SegmentSourceDetails | SongRequestSourceDetails;
}

export interface PlayToken {
  id: string;
  track: PlayTokenTrack;
  source: PlayTokenSource;
}

export interface NextPlayToken {
  token: PlayToken;
}

export interface CurrentPlayTokenQuery {
  currentUser: {
    id: string;
    activeSegment: Segment;
    currentToken: PlayToken;
  };
}

export interface NextPlayTokenMutation {
  nextPlayToken: {
    user: {
      id: string;
      currentToken: PlayToken;
    };
    errors: string[];
  };
}

export interface NotifyPlayTokenInput {
  guid: string;
}

export interface NotifyPlayTokenMutation {
  notifyPlayToken: {
    errors: string[];
  };
}

export interface SetActiveSegmentInput {
  id: string;
}

export interface SetActiveSegmentMutation {
  setActiveSegment: {
    user: {
      id: string;
      segment: {
        id: string;
        name: string;
        __typename: string;
      };
    };
  };
}

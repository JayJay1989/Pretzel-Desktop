import * as React from 'react';
import { flowRight as compose } from 'lodash';
import { graphql, QueryControls, withMutation } from '@apollo/client/react/hoc';
import { loader } from 'graphql.macro';
import { AddToPlaylistsListQuery } from './types/AddToPlaylistsListQuery';
import { Box, Button, TextInput, Keyboard } from 'grommet';
import { Night } from '../../../../../../Styled';
import { MenuList } from '../../../../../../Styled/MenuList';
import styled from 'styled-components/macro';
import { PlayerControlsNewPlaylist, PlayerControlsNewPlaylistVariables } from './types/PlayerControlsNewPlaylist';
import { Mutation } from '../../../../../GraphQL';
import { PlayerContext, withPlayerContext } from '../../../../PlayerContext';
import {
  PlayerControlsAppendPlaylist,
  PlayerControlsAppendPlaylistVariables,
} from './types/PlayerControlsAppendPlaylist';

const playlistsQuery = loader('./playlists.graphql');
const newPlaylistQuery = loader('./new-playlist.graphql');
const appendPlaylistQuery = loader('./append-playlist.graphql');

type PropsFromContext = Pick<PlayerContext, 'playToken'>;

interface PublicProps {
  hide: () => void;
}

interface GraphqlProps {
  data: QueryControls & AddToPlaylistsListQuery;
  newPlaylist: Mutation<PlayerControlsNewPlaylistVariables, PlayerControlsNewPlaylist>;
  appendPlaylist: Mutation<PlayerControlsAppendPlaylistVariables, PlayerControlsAppendPlaylist>;
}

type Props = PublicProps & PropsFromContext & GraphqlProps;

interface State {
  showNewPlaylist: boolean;
  newPlaylistName: string;
  loadingMore: boolean;
}

export const Wrapper = styled(Box)`
  height: fit-content;
  max-height: 50vh;
  min-width: max-content !important;
  position: absolute;
  white-space: nowrap;
  bottom: 32px;
  left: 0;
  padding-bottom: 7px;
  z-index: 2;
  display: flex;
  text-align: left;
  font-size: 12px;

  div {
    box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.1);
  }
`;

const PopupItem = styled(Box)`
  padding: 4px 16px;
  cursor: pointer;

  :hover {
    background: ${Night.bgSectionsAlt};
  }
`;

const BottomTail = styled.div`
  position: absolute;
  bottom: 0;
  left: 8px;
  width: 0;
  height: 0;
  border-left: 7px solid transparent;
  border-right: 7px solid transparent;
  border-top: 7px solid ${Night.bgSections};
`;

export class AddToPlaylistPresentation extends React.Component<Props, State> {
  state: State = {
    loadingMore: false,
    showNewPlaylist: false,
    newPlaylistName: '',
  };

  public render() {
    const playlists = this.props.data.loading
      ? null
      : this.props.data.userPlaylists.edges.map(playlistEdge => (
          <PopupItem
            justify="between"
            direction="row"
            onClick={() => this.handleExistingPlaylist(playlistEdge.node.id)}
            key={playlistEdge.node.id}
          >
            {playlistEdge.node.name}
          </PopupItem>
        ));
    const hasMore = this.props.data.userPlaylists && this.props.data.userPlaylists.pageInfo.hasNextPage;
    return (
      <Wrapper>
        <Box>
          <Box background={Night.bgSections} pad={{ vertical: '8px' }}>
            <PopupItem justify="between" direction="row">
              {this.state.showNewPlaylist ? (
                <Box direction="row">
                  <Keyboard onEnter={this.handleNewPlaylist}>
                    <TextInput
                      size="small"
                      style={{ padding: 3 }}
                      autoFocus={true}
                      onChange={event => this.setState({ newPlaylistName: event.target.value })}
                    />
                  </Keyboard>
                  <Box margin={{ left: 'small' }} height="100%" justify="center">
                    <Button onClick={this.handleNewPlaylist}>Save</Button>
                  </Box>
                </Box>
              ) : (
                <Box onClick={this.handleShowNewPlaylist}>+ New Playlist</Box>
              )}
            </PopupItem>
            <MenuList
              title="Playlists"
              items={playlists}
              hasMore={hasMore}
              onMore={this.onMore}
              loading={this.state.loadingMore}
            />
          </Box>
        </Box>
        <BottomTail />
      </Wrapper>
    );
  }

  private handleShowNewPlaylist = () => {
    this.setState({ showNewPlaylist: true });
  };

  private handleNewPlaylist = () => {
    if (this.props.playToken.track.id) {
      this.props
        .newPlaylist({
          variables: {
            attributes: {
              name: this.state.newPlaylistName,
              description: '',
              share: false,
              trackIds: [this.props.playToken.track.id],
            },
          },
        })
        .then(() => {
          this.props.data.refetch({ after: '' });
        });
      console.log(this.state.newPlaylistName);
    }
    this.setState({ showNewPlaylist: false });
  };

  private handleExistingPlaylist = (playlistID: string) => {
    this.props
      .appendPlaylist({
        variables: {
          playlistId: playlistID,
          trackId: this.props.playToken.track.id,
        },
      })
      .then(() => {
        this.props.hide();
      });
  };

  private onMore = () => {
    const after = this.props.data.userPlaylists.pageInfo.endCursor || '';
    console.debug('Loading More', {
      type: 'playlist',
      currentLength: this.props.data.userPlaylists.edges.length,
      after,
    });
    this.setState({ loadingMore: true });
    this.props.data.fetchMore({
      variables: { after },
      updateQuery: (previousQueryResult: AddToPlaylistsListQuery, { fetchMoreResult }) => {
        this.setState({ loadingMore: false });
        if (!fetchMoreResult) {
          return previousQueryResult;
        }
        return {
          playlists: Object.assign({}, fetchMoreResult.playlists, {
            edges: [...previousQueryResult.userPlaylists.edges, ...fetchMoreResult.playlists.edges],
          }),
        };
      },
    });
  };
}

function mapContextToProps(c: PlayerContext): PropsFromContext {
  return {
    playToken: c.playToken,
  };
}

// @ts-ignore
export const AddToPlaylist: React.ComponentClass<PublicProps> = compose(
  withPlayerContext(mapContextToProps),
  graphql(playlistsQuery, {
    options: {
      variables: {
        after: '',
      },
    },
  }),
  withMutation(newPlaylistQuery, {
    name: 'newPlaylist',
    options: {
      update: (cache, mutationResult) => {
        // TODO We could be more surgical and insert the newly added Playlist,
        // however this is good enough for the time being
        cache.evict({ fieldName: 'userPlaylists' });
      },
    },
  }),
  withMutation(appendPlaylistQuery, { name: 'appendPlaylist' }),
  // @ts-ignore --- mutations don't seem to give the right types yet
)(AddToPlaylistPresentation);

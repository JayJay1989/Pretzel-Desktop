import * as React from 'react';
import { compose } from 'react-apollo';
import {
  OptionIcon,
  OptionsWrapper,
  OptionWrapper,
} from './Styles';
import { SettingsContext, withSettingsContext } from '../../../../../Settings/Settings';
import { PlatformContext, withPlatformContext, URLS } from '../../../../../Platform';

interface ContextFromProps {
  instrumentalOnly: boolean;
  allowExplicit: boolean;
  youtubeSafe: boolean;
  notifyInChat: boolean;

  setInstrumentalOnly: (value: boolean) => void;
  setAllowExplicit: (value: boolean) => void;
  setYoutubeSafe: (value: boolean) => void;
  setNotifyInChat: (value: boolean) => void;
}

type PropsFromPlatform = Pick<PlatformContext, 'pretzelUser' | 'openExternalLink'>

type Props = ContextFromProps & PropsFromPlatform;

interface State {
  open: boolean;
}

export class OptionsDrawerPresentation extends React.Component<Props, State> {
  state = {
    open: false,
    mutating: false,
  };

  public render() {
    return (
      <OptionsWrapper>
        <StationOption
          icon="no-vocals"
          title="Instrumental only"
          active={this.props.instrumentalOnly}
          onClick={this.handleToggleInstrumental}
        />
        <StationOption
          icon="explicit"
          title="Allow Mature"
          active={this.props.allowExplicit}
          onClick={this.handleToggleExplicit}
        />
        <StationOption
          icon="youtube-safe"
          title="YouTube Safe mode"
          active={this.props.youtubeSafe}
          onClick={this.handleToggleYoutube}
        />
        <StationOption
          icon="chat-announcement"
          title={"Chat notification will be added soon, enjoy it now."}
          active={false}
          onClick={this.handleToggleNotify}
        />
        {!this.props.pretzelUser.premium &&
          <StationOption
            icon="radio"
            title="Non Interactive Mode"
            active={true}
            onClick={this.handleClickPremium}
          />
        }
      </OptionsWrapper>
    );
  }

  private handleClickPremium = () => {
    this.props.openExternalLink(URLS.PREMIUM);
  }

  private handleToggleInstrumental = () => {
    this.props.setInstrumentalOnly(!this.props.instrumentalOnly);
  };

  private handleToggleExplicit = () => {
    this.props.setAllowExplicit(!this.props.allowExplicit);
  };

  private handleToggleNotify = () => {
    this.props.setNotifyInChat(!this.props.notifyInChat);
  };

  private handleToggleYoutube = () => {
    this.props.setYoutubeSafe(!this.props.youtubeSafe);
  };
}

const StationOption = ({
  icon,
  title,
  active,
  onClick,
}: {
  icon: string;
  title: string;
  active: boolean;
  onClick: () => void;
}) => (
  <div title={title}>
    <OptionWrapper disabled={false} onClick={onClick}>
      <OptionIcon className={`pretzel-icon-${icon}`} active={active} />
    </OptionWrapper>
  </div>
);

function mapPlatformToProps(c: PlatformContext): PropsFromPlatform {
  return {
    pretzelUser: c.pretzelUser,
    openExternalLink: c.openExternalLink,
  }
}

function mapContextToProps(c: SettingsContext): ContextFromProps {
  return {
    instrumentalOnly: c.instrumentalOnly,
    allowExplicit: c.allowExplicit,
    youtubeSafe: c.youtubeSafe,
    notifyInChat: c.notifyInChat,

    setInstrumentalOnly: c.setInstrumentalOnly,
    setAllowExplicit: c.setAllowExplicit,
    setYoutubeSafe: c.setYoutubeSafe,
    setNotifyInChat: c.setNotifyInChat,
  };
}

export const Settings = compose(
  withPlatformContext(mapPlatformToProps),
  withSettingsContext(mapContextToProps)
)(OptionsDrawerPresentation);

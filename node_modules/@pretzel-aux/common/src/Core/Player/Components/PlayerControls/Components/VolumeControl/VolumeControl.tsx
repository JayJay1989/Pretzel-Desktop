import * as React from 'react';
import {
  BarWrapper,
  VolumeSlider,
  Wrapper,
} from './Styles';

const formatpct = (value: number) => `${Math.ceil(value)}%`;

interface PublicProps {
  volumeBarVisible: boolean;
  volume: number;
  setVolume: (vol: number, instant?: boolean, faded?: boolean, visible?: boolean) => void;
}

type Props = PublicProps;

interface State {
  volume: number;
  intermediateVolume: number;
}

export class VolumeControl extends React.Component<Props, State> {
  private volumeTimer?: number;

  constructor(props: Props) {
    super(props);
    this.state = {
      volume: props.volume,
      intermediateVolume: props.volume,
    };
  }
  public static getDerivedStateFromProps(props: Props, state: State) {
    return {
      ...state,
      volume: props.volume,
    };
  }

  public componentWillUnmount(): void {
    clearTimeout(this.volumeTimer);
  }

  public render() {
    return (
      <Wrapper>
        {this.props.volumeBarVisible && (
          <BarWrapper>
            <VolumeSlider
              min={0}
              max={100}
              step={1}
              value={this.state.volume * 100}
              orientation="vertical"
              tooltip={true}
              format={formatpct}
              onChange={this.handleSliderChange}
              onChangeComplete={() => {
                clearTimeout(this.volumeTimer);
                this.props.setVolume(this.state.intermediateVolume);
              }}
            />
          </BarWrapper>
        )}
      </Wrapper>
    );
  }

  private handleSliderChange = (value: number) => {
    const diff = Math.abs(this.state.volume - value / 100);
    if (diff < 0.1) {
      this.setState({ volume: value / 100, intermediateVolume: value / 100 });
      this.volumeTimer = setTimeout(() => {
        this.props.setVolume(this.state.intermediateVolume, true);
      }, 100);
    } else {
      this.setState({ intermediateVolume: value / 100 });
    }
  };
}

import * as React from 'react';
import { flowRight as compose } from 'lodash';
import { Box, Paragraph, Text } from 'grommet';
import { CSSProperties } from 'react';
import { joinDomsGrammatically, joinStringsGrammatically } from '../../../../Util';
import { Night } from '../../../../Styled';
import { PlayerContext, withPlayerContext } from '../../PlayerContext';
import { BasicTrackArtistFragment } from '../../Queries/types/BasicTrackArtistFragment';
import { Link } from 'react-router-dom';

type PropsFromContext = Pick<PlayerContext, 'playToken' | 'changeSegment'>;

type Props = PropsFromContext;

export class TrackInfoPresentation extends React.Component<Props> {
  public render() {
    if (!this.props.playToken) return null;
    const artists = joinStringsGrammatically(
      this.props.playToken.track.artists.map((artist: BasicTrackArtistFragment) => artist.name),
    );
    const artistsDom = joinDomsGrammatically(
      this.props.playToken.track.artists.map((artist: BasicTrackArtistFragment) => this.renderArtist(artist)),
    );
    const lineStyles: CSSProperties = {
      textOverflow: 'ellipsis',
      overflow: 'hidden',
      whiteSpace: 'nowrap',
    };
    return (
      <Box pad="8px" direction="column" justify="center" style={{ color: Night.textTitles }}>
        <Text style={{ fontSize: '16px', ...lineStyles }} title={this.props.playToken.track.title}>
          {this.props.playToken.track.title}
        </Text>
        {artists && (
          <Paragraph title={artists} margin="0" style={lineStyles} size="small">
            <Text size="xsmall" color={Night.textMuted}>
              by
            </Text>{' '}
            {artistsDom}
          </Paragraph>
        )}
        {this.props.playToken.track.album && (
          <Paragraph title={this.props.playToken.track.album.title} style={lineStyles} margin="0" size="small">
            <Text size="xsmall" color={Night.textMuted}>
              on
            </Text>{' '}
            <Link to={`/segment/${this.props.playToken.track.album.id}`}>{this.props.playToken.track.album.title}</Link>
          </Paragraph>
        )}
      </Box>
    );
  }

  private renderArtist(artist: BasicTrackArtistFragment) {
    return (
      <Link key={artist.id} data-id={artist.id} to={`/segment/${artist.id}`}>
        {artist.name}
      </Link>
    );
  }
}

function mapContextToProps(c: PlayerContext): PropsFromContext {
  return {
    changeSegment: c.changeSegment,
    playToken: c.playToken,
  };
}

export const TrackInfo = compose(withPlayerContext(mapContextToProps))(TrackInfoPresentation);

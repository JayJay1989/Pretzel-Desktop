import * as React from 'react';
import { flowRight as compose } from 'lodash';
import { PlayerContext, withPlayerContext } from './PlayerContext';
import { PlayerWrapper } from './Styles';
import { ActiveBar } from './Components/ActiveBar';
import { LargeAlbumArt } from './Components/LargeAlbumArt/LargeAlbumArt';
import { TrackProgress } from './Components/TrackProgress/TrackProgress';
import { TrackInfo } from './Components/TrackInfo/TrackInfo';
import { PlayerControls } from './Components/PlayerControls/PlayerControls';
import { Settings } from './Components/PlayerControls/Components/Settings/Settings';
import { Drawer } from '../../Components/Drawer/Drawer';
import { PlayTokenFragment } from './Queries/types/PlayTokenFragment';
import { ActiveSegmentFragment } from './Queries/types/ActiveSegmentFragment';

type Props = PropsFromContext;

export class VerticalPlayerPresentation extends React.Component<Props> {
  public render() {
    return (
      <PlayerWrapper>
        <div>
          <ActiveBar segment={this.props.activeSegment} />
          <LargeAlbumArt playToken={this.props.playToken} addToPlaylist={() => {}} />
          <TrackProgress />
          <TrackInfo />
        </div>
        <div style={{ position: 'relative' }}>
          <PlayerControls />
          <Drawer>
            <Settings />
          </Drawer>
        </div>
      </PlayerWrapper>
    );
  }
}

interface PropsFromContext {
  playToken: PlayTokenFragment | null;
  activeSegment: ActiveSegmentFragment | null;
}

function mapContextToProps(c: PlayerContext): PropsFromContext {
  return {
    playToken: c.playToken,
    activeSegment: c.activeSegment,
  };
}

export const VerticalPlayer = compose(withPlayerContext(mapContextToProps))(VerticalPlayerPresentation);

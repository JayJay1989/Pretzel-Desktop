import * as React from 'react';
import { createContext } from '@pretzel-aux/common/src/Util';
import jwt_decode from 'jwt-decode';
import { Analytics } from '../Analytics';
import * as Sentry from '@sentry/browser';
import { IpcRequest } from '../IPC/IPCRequest';

export interface PretzelJwt {
  user_id: string;
  guid: string;
  alpha: string;
  display_name: string;
  hash: string;
  premium: boolean;
  avatar: string;
  username: string | null;
  song_requests: boolean;
  exp: number;
}

export interface Features {
  writeToFile: boolean;
  songRequests: boolean;
  customKeybinds: boolean;
  systemKeybinds: boolean;
  compactMode: boolean;
  showDesktopDownloads: boolean;
}

export enum URLS {
  PREMIUM = 'https://pretzel.rocks/premium',
}

export interface PretzelUser {
  id: string;
  name: string;
  premium: boolean;

  jwt: PretzelJwt;
  pretzelJWT: string;
  platformJWT?: string;
}

interface AuthorizationWindowEvent {
  type: 'auth_redirect' | 'show' | 'close';
  url: string;
}

export enum OS {
  Windows = 'windows',
  Mac = 'mac',
  Other = 'other',
}

export function osFromNavigator(): OS {
  const platform = navigator && navigator.platform;
  if (platform.match(/Win/)) {
    return OS.Windows;
  } else if (platform.match(/Mac/)) {
    return OS.Mac;
  } else {
    return OS.Other;
  }
}

interface PlatformDetails {
  os: OS;
}

export interface PlatformContext {
  loaded: boolean;
  showingAuth: boolean;
  pretzelUser?: PretzelUser;
  features: Features;
  loadData: (key: string) => Promise<string>;
  saveData: (key: string, value: string) => void;
  notify: (message: string) => void;
  openExternalLink: (link: string) => boolean;
  getPlatformAuthorizationToken: () => string;
  setPretzelUser: (user: PretzelUser) => void;
  unloadApp: () => void;
  registerHotkey: (key: string, callback: (e?: KeyboardEvent) => void, local?: boolean) => void;
  unregisterHotkey: (key: string) => void;
  platformDetails: PlatformDetails;

  sendIPC: <T>(channel: string, message: IpcRequest) => Promise<T>;
  // This is here because SLOBS needs it... it's gross, but the alternatives are worse
  showAuthorizationWindow: (
    url: string,
    options: { width: number; height: number },
    eventHandler: (event: AuthorizationWindowEvent) => void,
  ) => void;
}

export const {
  Provider: BasePlatformProvider,
  Consumer: PlatformConsumer,
  withContext: withPlatformContext,
} = createContext<PlatformContext>('Platform', {
  loaded: false,
  showingAuth: false,
  features: {
    writeToFile: false,
    songRequests: false,
    compactMode: false,
    customKeybinds: false,
    systemKeybinds: false,
    showDesktopDownloads: false,
  },
  loadData: () => Promise.resolve(''),
  saveData: () => {},
  notify: () => {},
  openExternalLink: () => false,
  setPretzelUser: () => {},
  getPlatformAuthorizationToken: () => '',
  unloadApp: () => {},
  registerHotkey: () => {},
  unregisterHotkey: () => {},

  // @ts-ignore
  sendIPC: () => Promise.resolve({}),
  showAuthorizationWindow: () => {},
});

export function parsePretzelJWT(jwt: string): PretzelUser {
  const decoded: any = jwt_decode(jwt);
  Sentry.configureScope(scope => {
    scope.setUser({
      guid: decoded.guid,
      name: decoded.display_name,
      username: decoded.username,
    });
  });
  Analytics.defineUser(decoded);
  console.debug('Pretzel User Loaded', decoded);

  return {
    id: decoded.guid,
    name: decoded.display_name,
    premium: decoded.premium,
    jwt: decoded,
    pretzelJWT: jwt,
  };
}

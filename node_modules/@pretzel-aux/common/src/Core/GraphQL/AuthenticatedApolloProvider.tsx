import * as React from 'react';
import { Component } from 'react';
import ApolloClient from 'apollo-client';
import { ApolloProvider } from 'react-apollo';
import { ApolloProvider as ApolloHooksProvider } from 'react-apollo-hooks';
import { InMemoryCache, IntrospectionFragmentMatcher } from 'apollo-cache-inmemory';
import { ApolloLink } from 'apollo-link';
import { onError } from 'apollo-link-error';
import { HttpLink } from 'apollo-link-http';
//import { BatchHttpLink } from 'apollo-link-batch-http';
import * as Sentry from '@sentry/browser';
import { RetryLink } from 'apollo-link-retry';
import introspectionQueryResultData from '../../../schema/fragmentTypes.json';

const URI_BASE = ((): string => {
  if (process.env.REACT_APP_URI) {
    return process.env.REACT_APP_URI;
  } else if (process.env.REACT_APP_CONTEXT === 'production') {
    return 'https://gql.pretzel.rocks';
  }
  return 'https://gql-staging.pretzel.rocks';
})();

export interface PublicProperties {
  jwt: string | null;
}

interface State {
  jwt: string | null;
  client: ApolloClient<any> | null;
}

type Props = PublicProperties;

const fragmentMatcher = new IntrospectionFragmentMatcher({
  introspectionQueryResultData,
});

export class AuthenticatedApolloProvider extends Component<Props, State> {
  state: State = {
    jwt: null,
    client: null,
  };

  // @ts-ignore
  static getDerivedStateFromProps(props: Props, state: State) {
    if (props.jwt && props.jwt !== state.jwt) {
      const client = new ApolloClient({
        link: ApolloLink.from([
          new RetryLink(),
          onError(({ graphQLErrors, networkError }) => {
            if (graphQLErrors) {
              graphQLErrors.forEach(err => {
                Sentry.captureException(err);
                const { message, locations, path } = err;
                console.error(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`);
              });
            }
            if (networkError) {
              Sentry.captureException(networkError);
              console.error(`[Network error]: ${networkError}`);
            }
          }),
          new HttpLink({
            uri: `${URI_BASE}/graphql`,
            headers: {
              Authorization: `Bearer ${props.jwt}`,
            },
          }),
        ]),
        cache: new InMemoryCache({ fragmentMatcher }),
      });
      return {
        jwt: props.jwt,
        client,
      };
    } else {
      return state;
    }
  }

  render() {
    if (this.state.client) {
      return (
        <ApolloProvider client={this.state.client}>
          <ApolloHooksProvider client={this.state.client}>{this.props.children}</ApolloHooksProvider>
        </ApolloProvider>
      );
    }
    return null;
  }
}

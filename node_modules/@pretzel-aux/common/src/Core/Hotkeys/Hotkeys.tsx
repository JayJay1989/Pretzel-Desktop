import * as React from 'react';
import { compose, withMutation } from 'react-apollo';
import { SettingsContext, withSettingsContext } from '../Settings/Settings';
import { PlayerContext, withPlayerContext } from '../Player/PlayerContext';
import { PlatformContext, withPlatformContext } from '../Platform';
import { loader } from 'graphql.macro';
import { Mutation } from '../GraphQL';
import {
  SetTrackBlacklistedInput,
  SetTrackBlacklistedMutation,
  SetTrackLikedInput,
  SetTrackLikedMutation,
} from '../Player/Components/PlayerControls/schema';
import { AnalyticsEventType } from '../Analytics';

const likeTrackMutation = loader('../Player/Queries/set-track-liked.graphql');
const blacklistTrackMutation = loader('../Player/Queries/set-track-blacklisted.graphql');

interface GraphQLProps {
  likeTrack: Mutation<SetTrackLikedInput, SetTrackLikedMutation>;
  blacklistTrack: Mutation<SetTrackBlacklistedInput, SetTrackBlacklistedMutation>;
}

interface PropsFromSettings {
  bindMediaHotkeys: boolean;
}

type PropsFromPlayer = Pick<
  PlayerContext,
  | 'next'
  | 'previous'
  | 'togglePause'
  | 'playToken'
  | 'sendAnalyticsEvent'
  | 'increaseVolume'
  | 'decreaseVolume'
  | 'setVolume'
>;

type PropsFromPlatform = Pick<PlatformContext, 'features' | 'registerHotkey' | 'unregisterHotkey'>;

type Props = PropsFromPlayer & PropsFromPlatform & PropsFromSettings & GraphQLProps;

enum BindingState {
  Unbound,
  Binding,
  Bound,
}
interface State {
  mediaKeys: BindingState;
  domKeys: BindingState;
}

export class HotkeysPresentation extends React.Component<Props, State> {
  state = {
    mediaKeys: BindingState.Unbound,
    domKeys: BindingState.Unbound,
  };

  public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>): void {
    if (this.props.bindMediaHotkeys && this.state.mediaKeys === BindingState.Unbound) {
      this.bindMediaKeys();
    } else if (
      !this.props.bindMediaHotkeys &&
      prevProps.bindMediaHotkeys &&
      this.state.mediaKeys !== BindingState.Unbound
    ) {
      this.unbindMediaKeys();
    }

    if (this.state.domKeys === BindingState.Unbound) {
      this.bindDomKeys();
    }
  }

  public render(): React.ReactDOM {
    return null;
  }

  private bindMediaKeys = () => {
    this.setState({ mediaKeys: BindingState.Binding });
    if (this.props.features.systemKeybinds) {
      // Next/Previous events are different based on if it's a global or local hotkey :facepalm:
      // Media Keys only work on Windows, not on OSX or Linux
      this.props.registerHotkey('MediaPlayPause', this.props.togglePause, false);
      this.props.registerHotkey('MediaPreviousTrack', this.props.previous, false);
      this.props.registerHotkey('MediaNextTrack', this.props.next, false);
      this.props.registerHotkey('CommandOrControl+MediaPlayPause', this.props.togglePause, false);
      this.props.registerHotkey('CommandOrControl+MediaPreviousTrack', this.props.previous, false);
      this.props.registerHotkey('CommandOrControl+MediaNextTrack', this.props.next, false);
    }
    this.props.registerHotkey('MediaPlayPause', this.props.togglePause, true);
    this.props.registerHotkey('MediaTrackPrevious', this.props.previous, true);
    this.props.registerHotkey('MediaTrackNext', this.props.next, true);
    console.debug('Media Keys Bound');
    this.setState({ mediaKeys: BindingState.Bound });
  };

  private bindDomKeys = () => {
    this.setState({ domKeys: BindingState.Binding });
    this.props.registerHotkey('ArrowLeft', this.props.previous, true);
    this.props.registerHotkey('ArrowRight', this.props.next, true);
    this.props.registerHotkey(' ', this.props.togglePause, true);
    this.props.registerHotkey('b', this.handleDislike, true);
    this.props.registerHotkey('B', this.handleDislike, true);
    this.props.registerHotkey('l', this.handleLike, true);
    this.props.registerHotkey('L', this.handleLike, true);
    this.props.registerHotkey('+', this.props.increaseVolume, true);
    this.props.registerHotkey('=', this.props.increaseVolume, true);
    this.props.registerHotkey('-', this.props.decreaseVolume, true);
    this.props.registerHotkey('1', this.handleSetVolume, true);
    this.props.registerHotkey('2', this.handleSetVolume, true);
    this.props.registerHotkey('3', this.handleSetVolume, true);
    this.props.registerHotkey('4', this.handleSetVolume, true);
    this.props.registerHotkey('5', this.handleSetVolume, true);
    this.props.registerHotkey('6', this.handleSetVolume, true);
    this.props.registerHotkey('7', this.handleSetVolume, true);
    this.props.registerHotkey('8', this.handleSetVolume, true);
    this.props.registerHotkey('9', this.handleSetVolume, true);
    this.props.registerHotkey('0', this.handleSetVolume, true);
    this.setState({ domKeys: BindingState.Bound });
  };

  private unbindMediaKeys = () => {
    this.props.unregisterHotkey('MediaTrackPrevious');
    this.props.unregisterHotkey('MediaTrackNext');
    this.props.unregisterHotkey('MediaPlayPause');
    console.debug('Media Keys Unbound');
    this.setState({ mediaKeys: BindingState.Unbound });
  };

  handleLike = () => {
    this.props.likeTrack({
      variables: {
        trackId: this.props.playToken.track.id,
        value: !this.props.playToken.track.self.liked,
      },
    });
    this.props.sendAnalyticsEvent(AnalyticsEventType.Blacklist, this.props.playToken, 'hotkey');
  };

  handleDislike = () => {
    this.props
      .blacklistTrack({
        variables: {
          trackId: this.props.playToken.track.id,
          value: !this.props.playToken.track.self.blacklisted,
        },
      })
      .then(() => {
        this.props.next();
      });
    this.props.sendAnalyticsEvent(AnalyticsEventType.Blacklist, this.props.playToken, 'hotkey');
  };

  handleSetVolume = (e: KeyboardEvent) => {
    switch (e.key) {
      case '1':
        this.props.setVolume(0.1);
        break;
      case '2':
        this.props.setVolume(0.2);
        break;
      case '3':
        this.props.setVolume(0.3);
        break;
      case '4':
        this.props.setVolume(0.4);
        break;
      case '5':
        this.props.setVolume(0.5);
        break;
      case '6':
        this.props.setVolume(0.6);
        break;
      case '7':
        this.props.setVolume(0.7);
        break;
      case '8':
        this.props.setVolume(0.8);
        break;
      case '9':
        this.props.setVolume(0.9);
        break;
      case '0':
        this.props.setVolume(1);
        break;
    }
  };
}

function mapPlayerToProps(c: PlayerContext): PropsFromPlayer {
  return {
    next: c.next,
    previous: c.previous,
    togglePause: c.togglePause,
    playToken: c.playToken,
    sendAnalyticsEvent: c.sendAnalyticsEvent,
    increaseVolume: c.increaseVolume,
    decreaseVolume: c.decreaseVolume,
    setVolume: c.setVolume,
  };
}

function mapPlatformToProps(p: PlatformContext): PropsFromPlatform {
  return {
    unregisterHotkey: p.unregisterHotkey,
    registerHotkey: p.registerHotkey,
    features: p.features,
  };
}

function mapSettingsToProps(c: SettingsContext): PropsFromSettings {
  return {
    bindMediaHotkeys: c.bindMediaHotkeys,
  };
}

export const Hotkeys = compose(
  withPlayerContext(mapPlayerToProps),
  withPlatformContext(mapPlatformToProps),
  withSettingsContext(mapSettingsToProps),
  withMutation(likeTrackMutation, { name: 'likeTrack' }),
  withMutation(blacklistTrackMutation, { name: 'blacklistTrack' }),
)(HotkeysPresentation);

import * as React from 'react';

interface ClientDimensions {
  x?: number;
  y?: number;
  width?: number;
}

export default function useDimensions(ref: React.RefObject<any>): ClientDimensions {
  const [dimensions, setDimensions] = React.useState<ClientDimensions>({});

  const handleResize = React.useCallback(() => {
    ref.current && setDimensions((ref.current.getBoundingClientRect() as DOMRect).toJSON());
  }, [ref]);

  React.useLayoutEffect(() => {
    handleResize();

    if (typeof ResizeObserver === 'function' && ref.current) {
      let resizeObserver: ResizeObserver | null = new ResizeObserver(() => handleResize());
      resizeObserver.observe(ref.current);

      return () => {
        if (resizeObserver) {
          resizeObserver.disconnect();
        }
        resizeObserver = null;
      };
    } else {
      window.addEventListener('resize', handleResize);

      return () => {
        window.removeEventListener('resize', handleResize);
      };
    }
  }, [ref.current]);

  return dimensions;
}

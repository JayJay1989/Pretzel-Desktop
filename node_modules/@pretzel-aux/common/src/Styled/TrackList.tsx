import * as React from 'react';
import { Box, Heading } from 'grommet';
import { ClipLoader } from 'halogenium';
import { flowRight as compose } from 'lodash';
import { PlayerContext, withPlayerContext } from '../Core/Player/PlayerContext';
import { LoadMoreButton } from './LoadMoreButton';
import { SettingsContext, SettingsKeys, withSettingsContext } from '../Core/Settings/Settings';
import { PretzelColors } from './PretzelColors';
import { PlatformContext, withPlatformContext } from '../Core/Platform';
import { BasicTrackFragment } from '../Core/Player/Queries/types/BasicTrackFragment';
import { StyledRow } from './TrackList/Styled';
import { ForbiddenTrackItem } from './TrackList/ForbiddenTrackItem';
import { TrackItem } from './TrackList/TrackItem';

interface PublicProps {
  title: string;
  fit?: 'content' | 'container';
  playlistId?: string;
  tracks: BasicTrackFragment[];
  loading: boolean;
  hasMore: boolean;
  highlightId?: string;
  onMore: () => void;
  clickNotification?: (track: BasicTrackFragment) => void;
  loadingMore: boolean;
}

type PropsFromPlatform = Pick<PlatformContext, 'pretzelUser'>;
type PropsFromPlayerContext = Pick<PlayerContext, 'playToken' | 'playTrack' | 'next'>;
type PropsFromSettingsContext = Pick<
  SettingsContext,
  SettingsKeys.InstrumentalOnly | SettingsKeys.AllowExplicit | SettingsKeys.YoutubeSafe
>;

type Props = PublicProps & PropsFromPlayerContext & PropsFromSettingsContext & PropsFromPlatform;

function TrackListPresentation(props: Props) {
  function renderTracks() {
    if (props.loading && !props.tracks) {
      return renderPlaceholders();
    }
    const {
      allowExplicit,
      clickNotification,
      youtubeSafe,
      instrumentalOnly,
      highlightId,
      pretzelUser,
      playToken,
      playTrack,
      playlistId,
      next,
      tracks,
    } = props;

    return tracks.map((track, i) => {
      const explicitForbidden: boolean = !!track.explicit && !allowExplicit;
      const youtubeForbidden: boolean = !track.youtubeSafe && youtubeSafe;
      const instrumentalForbidden: boolean = !track.instrumental && instrumentalOnly;
      const freeTierForbidden = !pretzelUser?.premium;
      const forbidden: boolean =
        explicitForbidden || youtubeForbidden || instrumentalForbidden || track.self.blacklisted || freeTierForbidden;

      if (forbidden) {
        return (
          <ForbiddenTrackItem
            track={track}
            index={i}
            key={track.id}
            youtubeRestricted={youtubeForbidden}
            explicitRestricted={explicitForbidden}
            instrumentalRestricted={instrumentalForbidden}
            disliked={track.self.blacklisted}
            freeTierRestricted={freeTierForbidden}
          />
        );
      } else {
        return (
          <TrackItem
            track={track}
            index={i}
            key={track.id}
            playToken={playToken}
            playTrack={playTrack}
            playlistId={playlistId}
            next={next}
            highlight={track.id === highlightId}
            clickNotification={clickNotification}
          />
        );
      }
    });
  }

  function renderPlaceholders() {
    return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(i => (
      <StyledRow key={i}>
        <td>{i + 1}</td>
        <td />
        <td>... Loading...</td>
        <td />
        <td />
        <td>-:--</td>
      </StyledRow>
    ));
  }

  const style = props.fit === 'content' ? undefined : { overflow: 'auto', padding: '30px', height: '100%' };
  return (
    <div style={style}>
      <Heading level="2">{props.title}</Heading>
      <table>
        <tbody>{renderTracks()}</tbody>
      </table>
      <Box justify="center" align="center" margin="20px">
        {props.hasMore && <LoadMoreButton onMore={props.onMore} loading={props.loadingMore} />}
        {props.loading && <ClipLoader color={PretzelColors.brandGreen} size="16px" />}
      </Box>
    </div>
  );
}

function mapPlayerContextToProps(c: PlayerContext): PropsFromPlayerContext {
  return {
    playToken: c.playToken,
    playTrack: c.playTrack,
    next: c.next,
  };
}

function mapSettingsContextToProps(c: SettingsContext): PropsFromSettingsContext {
  return {
    instrumentalOnly: c.instrumentalOnly,
    allowExplicit: c.allowExplicit,
    youtubeSafe: c.youtubeSafe,
  };
}

function mapPlatformToProps(c: PlatformContext): PropsFromPlatform {
  return {
    pretzelUser: c.pretzelUser,
  };
}

export const TrackList: React.ComponentClass<PublicProps> = compose(
  withPlatformContext(mapPlatformToProps),
  withSettingsContext(mapSettingsContextToProps),
  withPlayerContext(mapPlayerContextToProps),
)(TrackListPresentation);

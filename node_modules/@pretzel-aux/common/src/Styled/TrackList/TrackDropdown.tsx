import { PlayTokenFragment } from '../../Core/Player/Queries/types/PlayTokenFragment';
import { BasicTrackFragment } from '../../Core/Player/Queries/types/BasicTrackFragment';
import { useMutation } from '@apollo/client';
import {
  SetTrackBlacklistedInput,
  SetTrackBlacklistedMutation,
  SetTrackLikedInput,
  SetTrackLikedMutation,
} from '../../Core/Player/Components/PlayerControls/schema';
import {
  RemoveTrackFromPlaylist,
  RemoveTrackFromPlaylistVariables,
} from '../../Core/Player/Queries/types/RemoveTrackFromPlaylist';
import React, { useContext } from 'react';
import { sendAnalyticsEvent } from './Utils';
import { AnalyticsEventType } from '../../Core/Analytics';
import { DropdownBox, DropdownItem, TopTail } from './Styled';
import { Night } from '../SlobsColors';
import { Icon } from '../Icon';
import { loader } from 'graphql.macro';
import { Box } from 'grommet';
import { SegmentQuery } from '../../Components/Segment/types/SegmentQuery';

const likeTrackMutation = loader('../../Core/Player/Queries/set-track-liked.graphql');
const dislikeTrackMutation = loader('../../Core/Player/Queries/set-track-blacklisted.graphql');
const removeTrackFromPlaylistMutation = loader('../../Core/Player/Queries/remove-track-from-playlist.graphql');

const segmentGql = loader('../../Components/Segment/segment.graphql');

interface TrackDropdownProps {
  playToken: PlayTokenFragment | null;
  track: BasicTrackFragment;
  next: () => void;
  playlistId?: string;
}

export function TrackDropdown(props: TrackDropdownProps) {
  const { track, playlistId, next, playToken } = props;
  const [likeTrack] = useMutation<SetTrackLikedMutation, SetTrackLikedInput>(likeTrackMutation);
  const [dislikeTrack] = useMutation<SetTrackBlacklistedMutation, SetTrackBlacklistedInput>(dislikeTrackMutation);

  const [removeTrackFromPlaylist] = useMutation<RemoveTrackFromPlaylist, RemoveTrackFromPlaylistVariables>(
    removeTrackFromPlaylistMutation,
    {
      update: (cache, mutationResult) => {
        const data = cache.readQuery<SegmentQuery>({ query: segmentGql, variables: { guid: playlistId } });
        if (!data || !data.segment || !data.segment.tracks || !data.segment.tracks.edges) return;
        const edges = data.segment.tracks.edges.filter(value => value?.node?.id !== track?.id);
        const segment = {
          ...data.segment,
          tracks: {
            ...data.segment.tracks,
            edges,
          },
        };
        cache.writeQuery({
          query: segmentGql,
          data: { segment },
        });
      },
    },
  );

  function handleLike(event: React.MouseEvent<any>) {
    // @ts-ignore
    event.target.parentElement.blur();
    likeTrack({
      variables: {
        trackId: track.id,
        value: !track.self.liked,
      },
    });
    sendAnalyticsEvent(AnalyticsEventType.Like, track);
  }

  function handleDislike(event: React.MouseEvent<any>) {
    // @ts-ignore
    event.target.parentElement.blur();
    dislikeTrack({
      variables: {
        trackId: track.id,
        value: !track.self.blacklisted,
      },
    }).then(() => {
      if (playToken && playToken.track.id === track.id) {
        next();
      }
    });
    sendAnalyticsEvent(AnalyticsEventType.Dislike, track);
  }

  function handleRemoveFromPlaylist(event: React.MouseEvent<any>) {
    // @ts-ignore
    event.target.parentElement.blur();
    removeTrackFromPlaylist({
      variables: {
        trackId: track.id,
        playlistId: playlistId || '',
      },
    });
    sendAnalyticsEvent(AnalyticsEventType.RemoveFromPlaylist, track);
  }

  return (
    <DropdownBox>
      <TopTail />
      <Box background={Night.bgSections} pad={{ vertical: '8px' }}>
        {/* <DropdownItem onClick={this.handleCopy}>Copy Song Link</DropdownItem>
                <Box border="bottom" margin={{ vertical: '8px' }} /> */}
        <DropdownItem justify="between" direction="row" onClick={handleLike}>
          <span>Like</span>
          {track.self.liked && (
            <span>
              <Icon name="checkmark" size={12} />
            </span>
          )}
        </DropdownItem>
        <DropdownItem justify="between" direction="row" onClick={handleDislike}>
          <span>Dislike</span>
          {track.self.blacklisted && (
            <span>
              <Icon name="checkmark" size={12} />
            </span>
          )}
        </DropdownItem>
        {!!playlistId && (
          <DropdownItem justify="between" direction="row" onClick={handleRemoveFromPlaylist}>
            <span>Remove from Playlist</span>
          </DropdownItem>
        )}
      </Box>
    </DropdownBox>
  );
}

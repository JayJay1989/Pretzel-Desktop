import * as React from 'react';
import 'instantsearch.css/themes/reset.css';
import { StationsList } from '../StationsList/StationsList';
import { Redirect, Route, Switch } from 'react-router-dom';
import { LeftNav } from '../LeftNav/LeftNav';
import { Settings } from '../Settings/Settings';
import { Home } from '../Home/Home';
import { Box, Grid, Heading } from 'grommet';
import { HorizontalPlayer } from '../../Core/Player/HorizontalPlayer';
import { SongRequests } from '../SongRequests/SongRequests';
import { compose } from 'react-apollo';
import { Affirmation } from '../Affirmation/Affirmation';
import { ArtistsList } from '../ArtistsList/ArtistsList';
import { AlbumsList } from '../AlbumsList/AlbumsList';
import { LabelsList } from '../LabelsList/LabelsList';
import { Search } from '../Search/Search';
import { Segment } from '../Segment/Segment';
import { ConnectedSearchBox } from '../Search/Components/SearchBox';
import { LikedTracksList } from '../LikedTracksList/LikedTracksList';
import { BlacklistedTracksList } from '../BlacklistedTracksList/BlacklistedTracksList';
import { SettingsContext, SettingsKeys, withSettingsContext } from '../../Core/Settings/Settings';
import { Night, PretzelColors } from '../../Styled';
import { PlatformContext, withPlatformContext } from '../../Core/Platform';
import { Logo } from '@pretzel-aux/assets/icons';

type PropsFromSettings = Pick<SettingsContext, SettingsKeys.SongRequestQueueVisible>;

interface PropsFromContext {
  unloadApp: () => void;
}

type Props = PropsFromContext & PropsFromSettings;

export class PretzelPagePresentation extends React.Component<Props> {
  public render() {
    // const { songRequestQueueVisible: sr } = this.props;
    const sr = false; // Turn off Song Requests here for now.
    const topnavEnd = sr ? 1 : 2;
    const mainEnd = sr ? 1 : 2;
    let areas = [
      { name: 'logo', start: [0, 0], end: [0, 0] },
      { name: 'topnav', start: [1, 0], end: [topnavEnd, 0] },
      { name: 'leftnav', start: [0, 1], end: [0, 1] },
      { name: 'main', start: [1, 1], end: [mainEnd, 1] },
      { name: 'player', start: [0, 2], end: [2, 2] },
    ];
    if (sr) {
      areas = areas.concat(
        { name: 'requests-header', start: [2, 0], end: [2, 0] },
        { name: 'requests-content', start: [2, 1], end: [2, 1] },
      );
    }
    return (
      <Grid fill rows={['60px', 'flex', '120px']} columns={['200px', 'flex', '280px']} areas={areas}>
        <Box
          gridArea="logo"
          background={{ color: Night.bgSectionsAlt }}
          border="bottom"
          alignContent="start"
          direction="row"
        >
          <Box
            background={{ color: PretzelColors.brandGreen }}
            pad="12px"
            width="60px"
            height="60px"
            onClick={this.maybeReload}
          >
            {<Logo />}
          </Box>
        </Box>
        <Box
          gridArea="topnav"
          background={{ color: Night.bgSectionsAlt }}
          border="bottom"
          direction="row"
          align="center"
        >
          <Box width="medium">
            <ConnectedSearchBox />
          </Box>
          <Affirmation />
        </Box>
        {sr && (
          <Box
            gridArea="requests-header"
            background={{ color: Night.bgSectionsAlt }}
            direction="row"
            align="center"
            pad={{ horizontal: '16px' }}
            justify="between"
          >
            <Heading level="4" size="small">
              Song Requests
            </Heading>
            {/*
          <label className="switch">
            <input className="switch__input" type="checkbox" />
            <span className="switch__slider" />
          </label>
          */}
          </Box>
        )}
        <Box gridArea="leftnav" background={{ color: Night.bgSectionsAlt }}>
          <LeftNav />
        </Box>
        <Box gridArea="main">
          <Switch>
            <Redirect from="/" to="/home" exact />
            <Route path="/settings" component={Settings} />
            <Route path="/home" component={Home} />
            <Route path="/stations" component={StationsList} />
            <Route path="/artists" component={ArtistsList} />
            <Route path="/albums" component={AlbumsList} />
            <Route path="/segment/:segmentId" component={Segment} />
            <Route path="/labels" component={LabelsList} />
            <Route path="/search" component={Search} />
            <Route path="/likes" component={LikedTracksList} />
            <Route path="/dislikes" component={BlacklistedTracksList} />
          </Switch>
        </Box>
        {sr && (
          <Box gridArea="requests-content">
            <SongRequests />
          </Box>
        )}
        <Box gridArea="player">
          <HorizontalPlayer />
        </Box>
      </Grid>
    );
  }

  private maybeReload = (event: React.MouseEvent<HTMLDivElement>) => {
    if (event.altKey) {
      this.props.unloadApp();
    }
  };
}

function mapContextToProps(c: PlatformContext): PropsFromContext {
  return {
    unloadApp: c.unloadApp,
  };
}

function mapSettingsToProps(c: SettingsContext): PropsFromSettings {
  return {
    songRequestQueueVisible: c.songRequestQueueVisible,
  };
}

export const PretzelPage = compose(
  withSettingsContext(mapSettingsToProps),
  withPlatformContext(mapContextToProps),
)(PretzelPagePresentation);

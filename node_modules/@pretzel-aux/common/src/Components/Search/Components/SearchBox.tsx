import React from 'react';
import { TextInput, Box, Button } from 'grommet';
import { RouteComponentProps, withRouter } from 'react-router';
import { connectSearchBox } from 'react-instantsearch-dom';
import { PretzelColors } from '../../../Styled';

interface SearchProps {
  currentRefinement: string;
  refine: (refinement: string) => void;
}

type Props = SearchProps & RouteComponentProps;

export function SearchBox({ currentRefinement, refine, history }: Props) {
  function onClear(event: React.MouseEvent<HTMLButtonElement>) {
    refine("");
    event.currentTarget.blur();
  }
  function onChange(event: React.ChangeEvent<HTMLInputElement>) {
    history.push('/search');
    refine(event.target.value);
  }

  function onSubmit(event: React.FormEvent<HTMLFormElement>) {
    event.preventDefault();
  }

  function onFormKeyUp(event: React.KeyboardEvent<HTMLFormElement>) {
    if(event.keyCode === 27) { // Escape
      event.currentTarget.reset();
      refine("");
    }
  }

  return (
    <form onSubmit={onSubmit} onKeyUp={onFormKeyUp}>
    <Box style={{position: "relative"}}>
      <TextInput
        placeholder="Search"
        // icon={<Search />}
        defaultValue=""
        onChange={onChange} />
      <Box style={{position:"absolute", right: 7, top:12, visibility: currentRefinement ? 'visible' : 'hidden' }}>
        <input type="reset" value="X" onClick={onClear} style={{background: "transparent", boxShadow: 'none', border: 'none', color: PretzelColors.baseWhite, outline: 'none', cursor: 'pointer'}}/>
      </Box>
    </Box>
    </form>
    )
}

export const ConnectedSearchBox = connectSearchBox(withRouter(SearchBox));

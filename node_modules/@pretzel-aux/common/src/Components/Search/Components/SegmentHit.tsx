import * as React from 'react';
import { Segment } from '../schema';
import { Hit } from 'react-instantsearch-core';
import aa from 'search-insights';
import { Image, Text, Box } from 'grommet';
import { flowRight as compose } from 'lodash';
import { PlayerContext, withPlayerContext } from '../../../Core/Player/PlayerContext';
import { minutesOrHours, toUrl } from '../../../Util';
import { MusicCard, Night } from '../../../Styled';
import { StationArt } from '../../../Styled/StationArt';

interface PublicProps {
  hit: Hit<Segment>;
}

type PropsFromPlayer = Pick<PlayerContext, 'playSegment'>;

type Props = PublicProps & PropsFromPlayer;

export class SegmentHitImplementation extends React.Component<Props> {
  public render() {

    let art, text, linkTo;

    const { hit } = this.props;
    linkTo = `/segment/${hit.guid}`
    switch(hit.entity){
      case 'Label':
        art = <Image src={toUrl(hit.artwork_guid)} width="100%" style={{ borderRadius: '50%' }} />;
        text = (
          <>
            <Text size="10px" color={Night.textMuted} margin={{ top: '3px', bottom: '3px' }}>Label</Text>
            <br />
            <Text color={Night.textTitles}>{hit.name}</Text>
            <Text size="xsmall">{hit.description}</Text>
          </>
        );
        break;
      case 'Artist':
        art = <Image src={toUrl(hit.artwork_guid)} width="100%" style={{ borderRadius: '50%' }} />;
        text = (
          <>
            <Text size="10px" color={Night.textMuted} margin={{ top: '3px', bottom: '3px' }}>Artist</Text>
            <br />
            <Text color={Night.textTitles}>{hit.name}</Text>
            <Text size="xsmall">{hit.description}</Text>
          </>
        );
        break;
      case 'Release':
        art = <Image src={toUrl(hit.artwork_guid)} width="100%" />;
        text = (
          <>
            <Text size="10px" color={Night.textMuted} margin={{ top: '3px', bottom: '3px' }}>Album</Text>
            <br />
            <Text color={Night.textTitles}>{hit.title}</Text>
            {/* <Text size="xsmall">{hit.artists}</Text> */}
          </>
        );
        break;
      case 'Station':
        linkTo = null;
        const isLiked = hit.guid === 'LIKED';
        art = <StationArt color1={hit.color1} color2={hit.color2} theIcon={hit.icon} />;
        text = (
          <>
            <Text size="10px" color={Night.textMuted} margin={{ top: '3px', bottom: '3px' }}>Station</Text>
            <Text color={Night.textTitles}>{hit.name}</Text>
            <Text size="xsmall">{hit.description}</Text>
          </>
        );
        break;
      default:
        // do nothing
    }

    return <MusicCard art={art} text={text} onClick={this.handleClick} linkTo={linkTo} />;
  }

  private handleClick = () => {
    this.props.playSegment({ id: this.props.hit.guid });
    // @ts-ignore The __queryID and __position properties of hit are not listed in the types but they exist
    const { objectID, __queryID: queryID, __position: position} = this.props.hit;
    aa('click', { objectID, queryID, position });
  };
}

function mapContextToProps(c: PlayerContext): PropsFromPlayer {
  return {
    playSegment: c.playSegment,
  };
}
export const SegmentHit = compose(withPlayerContext(mapContextToProps))(SegmentHitImplementation);

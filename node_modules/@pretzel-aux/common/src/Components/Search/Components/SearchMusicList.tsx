import * as React from 'react';
import { graphql, QueryControls } from '@apollo/client/react/hoc';
import { flowRight as compose } from 'lodash';
import { Hit } from 'react-instantsearch-core';
import aa from 'search-insights';
import { connectStateResults, connectHits, connectPagination } from 'react-instantsearch-dom';

import { Track } from '../schema';
import { Box, Heading } from 'grommet';
import { loader } from 'graphql.macro';
import { TrackList } from '../../../Styled';
import { SaturateTracksQuery } from '../types/SaturateTracksQuery';
import { BasicTrackFragment } from '../../../Core/Player/Queries/types/BasicTrackFragment';

const saturateQuery = loader('../search.graphql');

interface PublicProps {
  title: string;
}

interface SearchProps {
  hits: Hit<Track>[];
  searching: boolean;
  currentRefinement: number;
  nbPages: number;
  refine: (refinement: number) => void;
}

interface GraphqlProps {
  data: QueryControls & SaturateTracksQuery;
}

type Props = SearchProps & PublicProps & GraphqlProps;

export function SearchMusicListImplementation(props: Props) {
  const { title, searching, data, hits } = props;
  let tracks: BasicTrackFragment[] = [];
  if (!data.loading && !data.error && data.saturateTracks) {
    tracks = data.saturateTracks;
  }

  function handleTrackClicked(track: BasicTrackFragment) {
    let objectID = '';
    let queryID = '';
    let position = 0;

    for (let h of hits) {
      if (h.guid === track.id) {
        objectID = h.objectID;
        // @ts-ignore The __queryID and __position properties of hit are not listed in the types but they exist
        queryID = h.__queryID;
        // @ts-ignore
        position = h.__position;
        break;
      }
    }

    if (objectID && queryID) {
      aa('click', { objectID, queryID, position });
    }
  }

  return (
    <div style={{ margin: '-30px' }}>
      {/* Tracklist has a 30px padding that we have to counter */}
      {tracks && tracks.length ? (
        <TrackList
          title={title}
          tracks={tracks}
          loading={searching || data.loading}
          hasMore={false}
          loadingMore={false}
          onMore={() => false}
          clickNotification={handleTrackClicked}
          // commenting out the 'more' for now
          // hasMore={currentRefinement < nbPages}
          // loadingMore={searching || data.loading}
          // onMore={() => { refine(currentRefinement+1); }}
        />
      ) : (
        <Box pad="30px">
          <Heading level="2">{title}</Heading>
          <Box>No Results</Box>
        </Box>
      )}
    </div>
  );
}

export const SearchMusicList = compose(
  connectPagination,
  connectHits,
  connectStateResults,
  graphql(saturateQuery, {
    options: (props: SearchProps) => {
      const searchId = props.hits.map(h => h.guid).join(',');
      return {
        variables: {
          guids: searchId,
        },
      };
    },
  }),
)(SearchMusicListImplementation);

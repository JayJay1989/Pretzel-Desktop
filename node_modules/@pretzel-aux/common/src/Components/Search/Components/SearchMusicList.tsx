import * as React from 'react';
import { compose, graphql, GraphqlQueryControls } from 'react-apollo';
import { Hit } from 'react-instantsearch-core';
import { connectStateResults, connectHits, connectPagination } from 'react-instantsearch-dom';

import { Track, SearchQuery } from '../schema';
import { Box, Heading } from 'grommet';
import { loader } from 'graphql.macro';
import { BasicTrack } from '../../../Core/Player/Queries/schema';
import { TrackList } from '../../../Styled';

const searchQuery = loader('../search.graphql');

interface PublicProps {
  title: string;
}

interface SearchProps {
  hits: Hit<Track>[];
  searching: boolean;
  currentRefinement: number;
  nbPages: number;
  refine: (refinement: number) => void;
}

interface GraphqlProps {
  data: GraphqlQueryControls & SearchQuery;
}

type Props = SearchProps & PublicProps & GraphqlProps

export function SearchMusicListImplementation(props: Props) {
  const { title, searching, data }  = props;
  let tracks: BasicTrack[] = [];
  if (!data.loading && !data.error && data.search) {
    tracks = data.search.tracks.edges.map(t => t.node);
  }


  return (
    <div style={{margin: "-30px"}}>
      {/* Tracklist has a 30px padding that we have to counter */}
      {tracks && tracks.length ?
        <TrackList
          title={title}
          tracks={tracks}
          loading={searching || data.loading}
          hasMore={false}
          loadingMore={false}
          onMore={() => false}
          // commenting out the 'more' for now
          // hasMore={currentRefinement < nbPages}
          // loadingMore={searching || data.loading}
          // onMore={() => { refine(currentRefinement+1); }}
        />
      :
       <Box pad='30px'>
         <Heading level="2">{title}</Heading>
         <Box>No Results</Box>
       </Box>
      }
    </div>
  );
}

export const SearchMusicList = compose(connectPagination, connectHits, connectStateResults, graphql(searchQuery, {
  options: (props: SearchProps) => {
    const searchId = props.hits.map(h => h.guid).join(',')
    return {
      variables: {
        guids: searchId
      }
    }
  }
} ))(SearchMusicListImplementation);

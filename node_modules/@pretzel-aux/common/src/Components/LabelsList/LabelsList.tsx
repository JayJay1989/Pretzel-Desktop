import * as React from 'react';
import { graphql, QueryControls } from '@apollo/client/react/hoc';
import { flowRight as compose } from 'lodash';
import { loader } from 'graphql.macro';
import { LabelCard } from './Components/LabelCard';
import { MusicList } from '../../Styled';
import { LabelsListQuery } from './types/LabelsListQuery';

const labelsQuery = loader('./labels.graphql');

interface GraphqlProps {
  data: QueryControls & LabelsListQuery;
}

type Props = GraphqlProps;

interface State {
  loadingMore: boolean;
}

export class LabelsListPresentation extends React.Component<Props, State> {
  state: State = {
    loadingMore: false,
  };

  public render() {
    const labels = this.props.data.loading
      ? null
      : this.props.data.labels.edges.map(labelEdge => <LabelCard key={labelEdge.node.id} label={labelEdge.node} />);
    const hasMore = this.props.data.labels && this.props.data.labels.pageInfo.hasNextPage;
    return (
      <MusicList
        title="Labels"
        items={labels}
        hasMore={hasMore}
        onMore={this.onMore}
        circle={true}
        loading={this.state.loadingMore}
      />
    );
  }

  private onMore = () => {
    const after = this.props.data.labels.pageInfo.endCursor || '';
    console.debug('Loading More', {
      type: 'label',
      currentLength: this.props.data.labels.edges.length,
      after,
    });
    this.setState({ loadingMore: true });
    this.props.data.fetchMore({
      variables: { after },
      updateQuery: (previousQueryResult: LabelsListQuery, { fetchMoreResult }) => {
        this.setState({ loadingMore: false });
        if (!fetchMoreResult) {
          return previousQueryResult;
        }
        return {
          labels: Object.assign({}, fetchMoreResult.labels, {
            edges: [...previousQueryResult.labels.edges, ...fetchMoreResult.labels.edges],
          }),
        };
      },
    });
  };
}

export const LabelsList = compose(graphql(labelsQuery))(LabelsListPresentation);

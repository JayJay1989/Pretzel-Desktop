import * as React from 'react';
import { graphql, QueryControls } from '@apollo/client/react/hoc';
import { flowRight as compose } from 'lodash';
import { loader } from 'graphql.macro';
import { Box, Heading, Text } from 'grommet';
import { TrackList } from '../../Styled';
import { LikedTracksQuery } from './types/LikedTracksQuery';

const likedTracksQuery = loader('./liked-tracks.graphql');

interface GraphqlProps {
  data: QueryControls & LikedTracksQuery;
}

type Props = GraphqlProps;
interface State {
  loadingMore: boolean;
}

export class LikedTracksListPresentation extends React.Component<Props, State> {
  state: State = {
    loadingMore: false,
  };

  public render() {
    const tracks = this.props.data.likedTracks && this.props.data.likedTracks.edges.map(edge => edge.node);
    return this.props.data.loading || (tracks && tracks.length > 0) ? (
      <TrackList
        title="Likes"
        tracks={tracks}
        hasMore={this.props.data.likedTracks && this.props.data.likedTracks.pageInfo.hasNextPage}
        onMore={this.onMore}
        loading={this.props.data.loading}
        loadingMore={this.state.loadingMore}
      />
    ) : (
      <Box align="center" justify="center" height="100%" width="100%">
        <Heading level="2" margin={{ top: '20px', bottom: '5px' }}>
          You haven't liked anything!
        </Heading>
        <Text>
          Clicking <i className="pretzel-icon-thumbs_up" /> will add a song to this list. Listen to all of your liked
          songs on the Liked station.
        </Text>
      </Box>
    );
  }

  private onMore = () => {
    const after = this.props.data.likedTracks.pageInfo.endCursor || '';
    console.debug('Loading More', {
      type: 'track',
      currentLength: this.props.data.likedTracks.edges.length,
      after,
    });
    this.setState({ loadingMore: true });
    this.props.data.fetchMore({
      variables: { after },
      updateQuery: (previousQueryResult: LikedTracksQuery, { fetchMoreResult }) => {
        this.setState({ loadingMore: false });
        if (!fetchMoreResult) {
          return previousQueryResult;
        }
        return {
          likedTracks: Object.assign({}, fetchMoreResult.likedTracks, {
            edges: [...previousQueryResult.likedTracks.edges, ...fetchMoreResult.likedTracks.edges],
          }),
        };
      },
    });
  };
}

export const LikedTracksList = compose(
  graphql(likedTracksQuery, {
    options: {
      variables: {
        after: '',
      },
      fetchPolicy: 'cache-and-network',
    },
  }),
)(LikedTracksListPresentation);

import * as React from 'react';
import { compose, graphql, GraphqlQueryControls } from 'react-apollo';
import { loader } from 'graphql.macro';
import { BlacklistedTracksQuery } from './schema';
import { TrackList } from '../../Styled';
const blacklistedTracksQuery = loader('./blacklisted-tracks.graphql');

interface GraphqlProps {
  data: GraphqlQueryControls & BlacklistedTracksQuery;
}

type Props = GraphqlProps;
interface State {
  loadingMore: boolean;
}

export class BlacklistedTracksListPresentation extends React.Component<Props, State> {
  state: State = {
    loadingMore: false,
  };

  public render() {
    const tracks = this.props.data.blacklistedTracks && this.props.data.blacklistedTracks.edges.map(edge => edge.node);
    return (
      <TrackList
        title="Blacklisted"
        tracks={tracks}
        hasMore={this.props.data.blacklistedTracks && this.props.data.blacklistedTracks.pageInfo.hasNextPage}
        onMore={this.onMore}
        loading={this.props.data.loading}
        loadingMore={this.state.loadingMore}
      />
    );
  }

  private onMore = () => {
    const after = this.props.data.blacklistedTracks.pageInfo.endCursor || '';
    console.debug('Loading More', {
      type: 'track',
      currentLength: this.props.data.blacklistedTracks.edges.length,
      after,
    });
    this.setState({ loadingMore: true });
    this.props.data.fetchMore({
      variables: { after },
      updateQuery: (previousQueryResult: BlacklistedTracksQuery, { fetchMoreResult }) => {
        this.setState({ loadingMore: false });
        if (!fetchMoreResult) {
          return previousQueryResult;
        }
        return {
          blacklistedTracks: Object.assign({}, fetchMoreResult.blacklistedTracks, {
            edges: [...previousQueryResult.blacklistedTracks.edges, ...fetchMoreResult.blacklistedTracks.edges],
          }),
        };
      },
    });
  };
}

export const BlacklistedTracksList = compose(
  graphql(blacklistedTracksQuery, {
    options: {
      variables: {
        after: '',
      },
      fetchPolicy: 'cache-and-network',
    },
  }),
)(BlacklistedTracksListPresentation);

/* tslint:disable */
/* eslint-disable */
// @generated
// This file was automatically generated and should not be edited.

// ====================================================
// GraphQL query operation: BlacklistedTracksQuery
// ====================================================

export interface BlacklistedTracksQuery_blacklistedTracks_edges_node_artists {
  __typename: "Artist";
  id: string;
  /**
   * The segment name
   */
  name: string;
}

export interface BlacklistedTracksQuery_blacklistedTracks_edges_node_album {
  __typename: "Album";
  id: string;
  title: string;
}

export interface BlacklistedTracksQuery_blacklistedTracks_edges_node_self {
  __typename: "SelfTrack";
  liked: boolean;
  blacklisted: boolean;
}

export interface BlacklistedTracksQuery_blacklistedTracks_edges_node {
  __typename: "Track";
  id: string;
  title: string;
  duration: number | null;
  artworkGuid: string;
  explicit: boolean | null;
  instrumental: boolean | null;
  youtubeSafe: boolean;
  artists: BlacklistedTracksQuery_blacklistedTracks_edges_node_artists[];
  album: BlacklistedTracksQuery_blacklistedTracks_edges_node_album | null;
  self: BlacklistedTracksQuery_blacklistedTracks_edges_node_self;
}

export interface BlacklistedTracksQuery_blacklistedTracks_edges {
  __typename: "TrackEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  /**
   * The item at the end of the edge.
   */
  node: BlacklistedTracksQuery_blacklistedTracks_edges_node | null;
}

export interface BlacklistedTracksQuery_blacklistedTracks_pageInfo {
  __typename: "PageInfo";
  /**
   * When paginating forwards, the cursor to continue.
   */
  endCursor: string | null;
  /**
   * When paginating forwards, are there more items?
   */
  hasNextPage: boolean;
  /**
   * When paginating backwards, are there more items?
   */
  hasPreviousPage: boolean;
  /**
   * When paginating backwards, the cursor to continue.
   */
  startCursor: string | null;
}

export interface BlacklistedTracksQuery_blacklistedTracks {
  __typename: "TrackConnection";
  /**
   * A list of edges.
   */
  edges: (BlacklistedTracksQuery_blacklistedTracks_edges | null)[] | null;
  /**
   * Information to aid in pagination.
   */
  pageInfo: BlacklistedTracksQuery_blacklistedTracks_pageInfo;
}

export interface BlacklistedTracksQuery {
  /**
   * Return all of this user's blacklisted tracks
   */
  blacklistedTracks: BlacklistedTracksQuery_blacklistedTracks;
}

export interface BlacklistedTracksQueryVariables {
  after: string;
}

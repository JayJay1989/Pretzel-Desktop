import * as React from 'react';
import { graphql, QueryControls } from '@apollo/client/react/hoc';
import { flowRight as compose } from 'lodash';
import { Box, Text } from 'grommet';
import { loader } from 'graphql.macro';
import { Night } from '../../Styled';
import { SettingsContext, withSettingsContext } from '../../Core/Settings/Settings';
import { AffirmationQuery } from './types/AffirmationQuery';

const affirmationQuery = loader('./affirmation.graphql');

interface GraphQLProps {
  data: QueryControls & AffirmationQuery;
}

interface PropsFromContext {
  dailyAffirmations: boolean;
}

type Props = GraphQLProps & PropsFromContext;

export class AffirmationPresentation extends React.Component<Props> {
  public render() {
    if (!this.props.data || this.props.data.loading || !this.props.dailyAffirmations) {
      return <Box />;
    }
    return (
      <Box pad={{ horizontal: '14px' }} fill justify="center" align="end">
        <Text size="xsmall" color={Night.textParagraph}>
          {this.props.data.affirmation}
        </Text>
      </Box>
    );
  }
}

function mapContextToProps(c: SettingsContext): PropsFromContext {
  return {
    dailyAffirmations: c.dailyAffirmations,
  };
}

export const Affirmation = compose(
  withSettingsContext(mapContextToProps),
  graphql(affirmationQuery, {
    skip: (props: Props) => !props.dailyAffirmations,
  }),
)(AffirmationPresentation);

import * as React from 'react';
import { flowRight as compose } from 'lodash';
import { loader } from 'graphql.macro';
import { PlaylistCard } from './Components/PlaylistCard';
import { MusicList, PretzelColors } from '../../Styled';
import { graphql, QueryControls } from '@apollo/client/react/hoc';
import { PlaylistsListQuery } from './types/PlaylistsListQuery';
import { UserPlaylistsListQuery } from './types/UserPlaylistsListQuery';
import { Heading, Text } from 'grommet';
import { ListAdd } from '../../../../assets/icons';
import { PlatformContext, withPlatformContext } from '../../Core/Platform';
import { PlaylistUpsell } from './Components/PlaylistUpsell';

const playlistsQuery = loader('./playlists.graphql');
const userPlaylistsQuery = loader('./userPlaylists.graphql');

type PropsFromPlatform = Pick<PlatformContext, 'pretzelUser'>;

interface GraphqlProps {
  shared: QueryControls & PlaylistsListQuery;
  user: QueryControls & UserPlaylistsListQuery;
}

type Props = GraphqlProps & PropsFromPlatform;

interface State {
  loadingMorePlaylists: boolean;
  loadingMoreUserPlaylists: boolean;
}

export class PlaylistsListPresentation extends React.Component<Props, State> {
  state: State = {
    loadingMorePlaylists: false,
    loadingMoreUserPlaylists: false,
  };

  public render() {
    if (this.props.pretzelUser && !this.props.pretzelUser.premium) {
      return <PlaylistUpsell />;
    }

    const userPlaylists = this.props.user.loading
      ? null
      : this.props.user.userPlaylists.edges.map(playlistEdge => (
          <PlaylistCard key={playlistEdge.node.id} playlist={playlistEdge.node} />
        ));
    const hasMoreUserPlaylists = this.props.user.userPlaylists && this.props.user.userPlaylists.pageInfo.hasNextPage;

    const playlists = this.props.shared.loading
      ? null
      : this.props.shared.playlists.edges.map(playlistEdge => (
          <PlaylistCard key={playlistEdge.node.id} playlist={playlistEdge.node} />
        ));
    const hasMorePlaylists = this.props.shared.playlists && this.props.shared.playlists.pageInfo.hasNextPage;
    return (
      <div style={{ overflow: 'auto' }}>
        {this.props.user.loading || this.props.user.userPlaylists.edges.length ? (
          <MusicList
            fit="content"
            title="Your Playlists"
            items={userPlaylists}
            hasMore={hasMoreUserPlaylists}
            onMore={this.onMoreUserPlaylists}
            loading={this.state.loadingMoreUserPlaylists}
          />
        ) : (
          <div style={{ padding: 30 }}>
            <Heading level="2">Your Playlists</Heading>
            <Text>
              It's empty here! Create your first playlist by clicking the{' '}
              <ListAdd style={{ height: 16, color: PretzelColors.brandGreen2 }} /> icon while listening to a song that
              hits just right.
            </Text>
          </div>
        )}
        {/*
        <MusicList
          fit="content"
          title="Popular Shared Playlists"
          items={playlists}
          hasMore={hasMorePlaylists}
          onMore={this.onMore}
          loading={this.state.loadingMorePlaylists}
        />
        */}
      </div>
    );
  }

  private onMoreUserPlaylists = () => {
    const after = this.props.user.userPlaylists.pageInfo.endCursor || '';
    console.debug('Loading More', {
      type: 'playlist',
      currentLength: this.props.user.userPlaylists.edges.length,
      after,
    });
    this.setState({ loadingMoreUserPlaylists: true });
    this.props.user.fetchMore({
      variables: { after },
      updateQuery: (previousQueryResult: UserPlaylistsListQuery, { fetchMoreResult }) => {
        this.setState({ loadingMorePlaylists: false });
        if (!fetchMoreResult) {
          return previousQueryResult;
        }
        return {
          userPlaylists: Object.assign({}, fetchMoreResult.userPlaylists, {
            edges: [...previousQueryResult.userPlaylists.edges, ...fetchMoreResult.userPlaylists.edges],
          }),
        };
      },
    });
  };

  private onMore = () => {
    const after = this.props.shared.playlists.pageInfo.endCursor || '';
    console.debug('Loading More', {
      type: 'playlist',
      currentLength: this.props.shared.playlists.edges.length,
      after,
    });
    this.setState({ loadingMorePlaylists: true });
    this.props.shared.fetchMore({
      variables: { after },
      updateQuery: (previousQueryResult: PlaylistsListQuery, { fetchMoreResult }) => {
        this.setState({ loadingMorePlaylists: false });
        if (!fetchMoreResult) {
          return previousQueryResult;
        }
        return {
          playlists: Object.assign({}, fetchMoreResult.playlists, {
            edges: [...previousQueryResult.playlists.edges, ...fetchMoreResult.playlists.edges],
          }),
        };
      },
    });
  };
}

function mapPlatformToProps(c: PlatformContext): PropsFromPlatform {
  return {
    pretzelUser: c.pretzelUser,
  };
}

export const PlaylistsList = compose(
  graphql(playlistsQuery, {
    name: 'shared',
    options: {
      variables: {
        after: '',
      },
    },
  }),
  graphql(userPlaylistsQuery, {
    name: 'user',
    options: {
      variables: {
        after: '',
      },
    },
  }),
  withPlatformContext(mapPlatformToProps),
  // @ts-ignore
)(PlaylistsListPresentation);

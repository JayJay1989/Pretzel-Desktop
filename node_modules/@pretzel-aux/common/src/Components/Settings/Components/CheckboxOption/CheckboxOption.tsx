import * as React from 'react';
import {
  CheckboxGroup,
  ExternalWrapper,
  StyledCheckbox,
  StyledInput,
  StyledText,
  Wrapper,
} from './Styles';
import uuid from 'uuid';

interface PublicProps {
  value: boolean;
  onChange: (value: boolean) => void;
  title?: string;
  disabled?: boolean;
  label: string | React.ReactNode;
  disabledNotice?: string;
}

type Props = PublicProps;

export class CheckboxOptionPresentation extends React.Component<Props> {
  state = {};

  private uuid = uuid();

  public render() {
    // @ts-ignore
    return (
      <ExternalWrapper>
        <Wrapper title={this.props.title}>
          <CheckboxGroup>
            <StyledInput
              disabled={this.props.disabled}
              id={`option-${this.uuid}`}
              type="checkbox"
              checked={this.props.value}
              onChange={e => {
                this.props.onChange(e.target.checked);
              }}
            />
            <StyledCheckbox disabled={this.props.disabled} checked={this.props.value} htmlFor={`option-${this.uuid}`} />
          </CheckboxGroup>
          <CheckboxGroup>
            <StyledText
              disabled={this.props.disabled}
              onClick={() => {
                if (!this.props.disabled) this.props.onChange(!this.props.value);
              }}
            >
              {React.Children.toArray(this.props.label)}
            </StyledText>
          </CheckboxGroup>
        </Wrapper>
        {this.props.disabledNotice ? (
          <Wrapper style={{ marginTop: -18 }}>
            <CheckboxGroup>
              <StyledCheckbox disabled={true} style={{ opacity: 0 }} />
            </CheckboxGroup>
            <CheckboxGroup>
              <StyledText>{this.props.disabledNotice}</StyledText>
            </CheckboxGroup>
          </Wrapper>
        ) : null}
      </ExternalWrapper>
    );
  }
}

export const CheckboxOption = CheckboxOptionPresentation;

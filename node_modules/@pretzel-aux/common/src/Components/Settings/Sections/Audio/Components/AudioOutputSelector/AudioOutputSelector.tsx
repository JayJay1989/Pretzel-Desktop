import * as React from 'react';
import { flowRight as compose } from 'lodash';
import {
  AudioOutputRefresh,
  AudioOutputTitle,
  AudioOutputWrapper,
  AudioSelectorWrapper,
  SelectWrapper,
} from './Styles';
import Select from 'react-select';
import { ValueType } from 'react-select/lib/types';
import { AudioPermissionsAlert } from '../AudioPermissionsAlert/AudioPermissionsAlert';
import { customDropDownStyles } from '../CustomSelectStyles';
import { AudioOutput, SettingsContext, withSettingsContext } from '../../../../../../Core/Settings/Settings';

interface PropsFromContext {
  audioOutputList: AudioOutput[];
  audioOutputDevice: string;
  refreshAudioOutputList: () => void;
  setAudioOutputDevice: (value: string) => void;
}

type Props = PropsFromContext;

interface State {
  showPermissionDialog: boolean;
}

interface SelectOption {
  value: string;
  label: string;
}

export class AudioOutputSelectorPresentation extends React.Component<Props, State> {
  state = {
    showPermissionDialog: false,
    triedPermissions: false,
  };

  public render() {
    const options: SelectOption[] = this.props.audioOutputList
      .map(output => ({ label: output.label, value: output.device.deviceId }))
      .sort((a, b) => (a.label < b.label ? -1 : a.label > b.label ? 1 : 0));
    const selected = options.find(option => option.value === this.props.audioOutputDevice);
    return (
      <AudioOutputWrapper>
        <AudioOutputTitle>Audio Output Device</AudioOutputTitle>
        <AudioSelectorWrapper>
          <SelectWrapper className="no-drag">
            {/*
                  // @ts-ignore This isn't typed well */}
            <Select
              name="outputs"
              value={selected}
              options={options}
              onChange={this.handleOutputChanged}
              className="audioOutputs"
              placeholder="Default"
              styles={customDropDownStyles}
            />
          </SelectWrapper>
          <AudioOutputRefresh>
            <i onClick={this.handleClickRefresh} className="pretzel-icon-refresh" />
          </AudioOutputRefresh>
        </AudioSelectorWrapper>
        <div style={{ paddingTop: '10px' }}>
          Click <i className="pretzel-icon-refresh" /> to refresh your audio devices.
        </div>
        {this.state.showPermissionDialog && <AudioPermissionsAlert onClick={this.handleGetPermissionsForOutput} />}
      </AudioOutputWrapper>
    );
  }
  private handleClickRefresh = () => {
    if (this.state.triedPermissions || !navigator.mediaDevices) {
      this.props.refreshAudioOutputList();
    } else {
      this.setState({ showPermissionDialog: true });
    }
  };

  private handleOutputChanged = (o: ValueType<SelectOption>) => {
    // @ts-ignore These types are shit
    this.props.setAudioOutputDevice(o.value);
  };

  private handleGetPermissionsForOutput = () => {
    navigator.mediaDevices
      .getUserMedia({ audio: true })
      .then(() => this.props.refreshAudioOutputList())
      .then(() => this.setState({ showPermissionDialog: false }));
  };
}

function mapContextToProps(c: SettingsContext): PropsFromContext {
  return {
    audioOutputList: c.audioOutputList,
    audioOutputDevice: c.audioOutputDevice,
    refreshAudioOutputList: c.refreshAudioOutputList,
    setAudioOutputDevice: c.setAudioOutputDevice,
  };
}

export const AudioOutputSelector = compose(withSettingsContext(mapContextToProps))(AudioOutputSelectorPresentation);

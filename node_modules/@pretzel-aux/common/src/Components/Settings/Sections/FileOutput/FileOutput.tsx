import * as React from 'react';
import { flowRight as compose } from 'lodash';
import { SettingsSection } from '../../Components/SettingsSection';
import { PlatformContext, withPlatformContext } from '@pretzel-aux/common/src/Core/Platform';
import { SettingsContext, SettingsKeys, withSettingsContext } from '../../../../Core/Settings/Settings';
import { CheckboxOption } from '../../Components/CheckboxOption/CheckboxOption';
import { OutputFileSelector } from './OutputFileSelector';
import { PICK_FILE, PickFileParams } from '../../../../Core/IPC/IPCRequest';
import { OutputFormatter } from './OutputFormatter';
import { Text } from 'grommet';
import { PretzelColors } from '../../../../Styled';

interface PublicProps {}

type PropsFromPlatform = Pick<PlatformContext, 'features' | 'sendIPC'>;
type PropsFromSettings = Pick<
  SettingsContext,
  | SettingsKeys.WriteTrackInfoToFile
  | SettingsKeys.WriteTrackInfoFile
  | SettingsKeys.WriteTrackJsonToFile
  | SettingsKeys.WriteTrackJsonFile
  | SettingsKeys.WriteToFileFormat
  | SettingsKeys.WriteToFilePaused
  | SettingsKeys.WriteToFilePausedFormat
  | SettingsKeys.WriteCoverToFile
  | SettingsKeys.WriteCoverFile
  | 'setWriteTrackInfoToFile'
  | 'setWriteTrackInfoFile'
  | 'setWriteTrackJsonToFile'
  | 'setWriteTrackJsonFile'
  | 'setWriteToFileFormat'
  | 'setWriteToFilePaused'
  | 'setWriteToFilePausedFormat'
  | 'setWriteCoverToFile'
  | 'setWriteCoverFile'
>;
type Props = PublicProps & PropsFromPlatform & PropsFromSettings;

interface State {}

export class GeneralPresentation extends React.Component<Props, State> {
  state = {};

  public render() {
    if (this.props.features.writeToFile) {
      return (
        <SettingsSection title="File Output">
          <CheckboxOption
            label="Write Track Info to file"
            onChange={this.props.setWriteTrackInfoToFile}
            value={this.props.writeTrackInfoToFile}
          />

          <OutputFileSelector
            title="Track Info file"
            disabled={!this.props.writeTrackInfoToFile}
            filePath={this.props.writeTrackInfoFile}
            clearSavePath={this.clearTrackInfoFile}
            openSaveDialog={this.openTrackInfoDialog}
          />
          <OutputFormatter
            title="Now Playing Output format"
            formatString={this.props.writeToFileFormat}
            onChange={this.props.setWriteToFileFormat}
            disabled={!this.props.writeTrackInfoToFile}
          />
          <CheckboxOption
            label="Alternate output when paused"
            onChange={this.props.setWriteToFilePaused}
            value={this.props.writeToFilePaused}
          />
          <OutputFormatter
            title="Paused Output format"
            disabled={!this.props.writeToFilePaused}
            formatString={this.props.writeToFilePausedFormat}
            onChange={this.props.setWriteToFilePausedFormat}
          />

          <CheckboxOption
            label="Save Album Cover to file"
            onChange={this.props.setWriteCoverToFile}
            value={this.props.writeCoverToFile}
          />
          <OutputFileSelector
            title="Cover file"
            disabled={!this.props.writeCoverToFile}
            filePath={this.props.writeCoverFile}
            clearSavePath={this.clearCoverFile}
            openSaveDialog={this.openCoverDialog}
          />
          <Text size="small" color={PretzelColors.brandGreen}>
            New! JSON output for Programmers! Schema will change over time.
          </Text>
          <CheckboxOption
            label="Save Now Playing JSON Data to file"
            onChange={this.props.setWriteTrackJsonToFile}
            value={this.props.writeTrackJsonToFile}
          />
          <OutputFileSelector
            title="Now Playing JSON file"
            disabled={!this.props.writeTrackJsonToFile}
            filePath={this.props.writeTrackJsonFile}
            clearSavePath={this.clearTrackJsonFile}
            openSaveDialog={this.openTrackJsonDialog}
          />
        </SettingsSection>
      );
    }
    return null;
  }

  private openTrackInfoDialog = async () => {
    console.log('Open Track Info Dialog');
    const params: PickFileParams = {
      type: PICK_FILE,
      title: 'Set Now Playing label file',
      message: 'Set Now Playing label file',
      filters: [{ name: 'Text', extensions: ['txt'] }],
      defaultPath: this.props.writeTrackInfoFile,
    };
    const newPath = await this.props.sendIPC<string>(PICK_FILE, { params });
    this.props.setWriteTrackInfoFile(newPath);
  };

  private clearTrackInfoFile = () => {
    this.props.setWriteTrackInfoFile('');
  };

  private openCoverDialog = async () => {
    const params: PickFileParams = {
      type: PICK_FILE,
      title: 'Set Album Cover file',
      message: 'Set Album Cover file',
      filters: [{ name: 'Image', extensions: ['jpg'] }],
      defaultPath: this.props.writeCoverFile,
    };
    const newPath = await this.props.sendIPC<string>(PICK_FILE, { params });
    this.props.setWriteCoverFile(newPath);
  };

  private clearCoverFile = () => {
    this.props.setWriteCoverFile('');
  };

  private openTrackJsonDialog = async () => {
    console.log('Open Track Json Dialog');
    const params: PickFileParams = {
      type: PICK_FILE,
      title: 'Set Now Playing Json file',
      message: 'Set Now Playing JSON file',
      filters: [{ name: 'JSON', extensions: ['json'] }],
      defaultPath: this.props.writeTrackJsonFile,
    };
    const newPath = await this.props.sendIPC<string>(PICK_FILE, { params });
    this.props.setWriteTrackJsonFile(newPath);
  };

  private clearTrackJsonFile = () => {
    this.props.setWriteTrackJsonFile('');
  };
}

function mapSettingsToProps(c: SettingsContext): PropsFromSettings {
  return {
    [SettingsKeys.WriteTrackInfoToFile]: c[SettingsKeys.WriteTrackInfoToFile],
    [SettingsKeys.WriteTrackInfoFile]: c[SettingsKeys.WriteTrackInfoFile],
    [SettingsKeys.WriteTrackJsonToFile]: c[SettingsKeys.WriteTrackJsonToFile],
    [SettingsKeys.WriteTrackJsonFile]: c[SettingsKeys.WriteTrackJsonFile],
    [SettingsKeys.WriteToFileFormat]: c[SettingsKeys.WriteToFileFormat],
    [SettingsKeys.WriteToFilePaused]: c[SettingsKeys.WriteToFilePaused],
    [SettingsKeys.WriteToFilePausedFormat]: c[SettingsKeys.WriteToFilePausedFormat],
    [SettingsKeys.WriteCoverToFile]: c[SettingsKeys.WriteCoverToFile],
    [SettingsKeys.WriteCoverFile]: c[SettingsKeys.WriteCoverFile],
    setWriteTrackInfoToFile: c.setWriteTrackInfoToFile,
    setWriteTrackInfoFile: c.setWriteTrackInfoFile,
    setWriteTrackJsonToFile: c.setWriteTrackJsonToFile,
    setWriteTrackJsonFile: c.setWriteTrackJsonFile,
    setWriteToFileFormat: c.setWriteToFileFormat,
    setWriteToFilePaused: c.setWriteToFilePaused,
    setWriteToFilePausedFormat: c.setWriteToFilePausedFormat,
    setWriteCoverToFile: c.setWriteCoverToFile,
    setWriteCoverFile: c.setWriteCoverFile,
  };
}

function mapContextToProps(c: PlatformContext): PropsFromPlatform {
  return {
    sendIPC: c.sendIPC,
    features: c.features,
  };
}

export const FileOutput = compose(
  withSettingsContext(mapSettingsToProps),
  withPlatformContext<PropsFromPlatform>(mapContextToProps),
)(GeneralPresentation);

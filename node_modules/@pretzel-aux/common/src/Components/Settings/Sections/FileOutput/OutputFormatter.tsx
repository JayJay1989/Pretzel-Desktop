import * as React from 'react';
import { flowRight as compose } from 'lodash';
import { PlayerContext, withPlayerContext } from '../../../../Core/Player/PlayerContext';
import styled from 'styled-components';
import { PretzelColors } from '../../../../Styled';
import ReactTooltip from 'react-tooltip';
import { getNowPlayingStringForFileOutput } from '../../../../Util';

interface PublicProps {
  title: string;
  disabled: boolean;
  formatString: string;
  onChange: (newFormatString: string) => {};
}

type PropsFromPlayer = Pick<PlayerContext, 'playToken'>;
type Props = PublicProps & PropsFromPlayer;

interface State {}

interface Disableable {
  disabled?: boolean;
}

const ExternalWrap = styled.div`
  display: flex;
  flex-direction: column;
`;

const FormatInputWrapper = styled.div`
  margin: 10px;
`;
const Title = styled.p<Disableable>`
  color: ${props => (props.disabled ? PretzelColors.baseMuted : PretzelColors.baseWhite)};
  font-size: 14px;
  margin-bottom: 5px;
`;
const Wrapper = styled.div`
  display: flex;
  flex-direction: row;
  align-items: center;
  flex: 1;
`;
const Info = styled.div`
  color: ${PretzelColors.baseMuted};
  padding: 5px 20px;
  font-size: 14px;
`;
const Input = styled.input`
  ${'' /* background-color: #fff; */}
  border-color: #d9d9d9 #ccc #b3b3b3;
  border-radius: 4px;
  border: 1px solid #ccc;
  ${'' /* color: #333; */}
  cursor: ${props => (props.disabled ? 'not-allowed' : 'default')};
  display: table;
  border-spacing: 0;
  border-collapse: separate;
  height: 36px;
  outline: none;
  overflow: hidden;
  position: relative;
  width: 100%;
  line-height: 34px;
  white-space: nowrap;
  font-size: 14px;
  padding: 0 10px;
`;
const InputWrapper = styled.div`
  width: 98%;
`;

const CustomTooltip = styled(ReactTooltip)`
  background-color: ${PretzelColors.baseBackground2} !important;
  &.show {
    opacity: 1 !important;
  }
  &.place-left {
    &:after {
      border-left-color: ${PretzelColors.baseBackground2} !important;
      border-left-style: solid !important;
      border-left-width: 6px !important;
    }
  }
  text-align: center;
`;

const List = styled.ul`
  padding: 0;
  margin: 0;
  list-style: none;
`;

const ListItem = styled.li`
  padding: 0;
  margin: 0;
`;

export class GeneralPresentation extends React.Component<Props, State> {
  state = {};

  public render() {
    const { title, disabled, playToken, formatString, onChange } = this.props;
    const previewString = getNowPlayingStringForFileOutput(playToken, formatString, true, false, '');
    return (
      <ExternalWrap>
        <FormatInputWrapper>
          <Title disabled={disabled}>{title}</Title>
          <Wrapper>
            <InputWrapper>
              <Input
                disabled={disabled}
                type="text"
                value={formatString || ''}
                onChange={event => onChange(event.target.value)}
              />
            </InputWrapper>
            <Info data-tip data-for="tags">
              ?
            </Info>
            <CustomTooltip id="tags" place="left" effect="solid" offset={{ right: 10 }}>
              <p>Supported tags:</p>
              <List>
                <ListItem>{`{album}`}</ListItem>
                <ListItem>{`{artist}`}</ListItem>
                <ListItem>{`{title}`}</ListItem>
                <ListItem>{`{pretzel}`}</ListItem>
              </List>
            </CustomTooltip>
          </Wrapper>
        </FormatInputWrapper>
        <FormatInputWrapper>
          <Title disabled={disabled}>{title} preview</Title>
          <Wrapper>
            <InputWrapper>
              <Input disabled={disabled} type="text" readOnly value={previewString} />
            </InputWrapper>
          </Wrapper>
        </FormatInputWrapper>
      </ExternalWrap>
    );
  }
}

function mapPlayerToProps(c: PlayerContext): PropsFromPlayer {
  return {
    playToken: c.playToken,
  };
}

export const OutputFormatter = compose(withPlayerContext(mapPlayerToProps))(GeneralPresentation);

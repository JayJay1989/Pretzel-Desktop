import * as React from 'react';
import { flowRight as compose } from 'lodash';
import { CheckboxOption } from '../../Components/CheckboxOption/CheckboxOption';
import { SettingsSection } from '../../Components/SettingsSection';
import { SettingsContext, SettingsKeys, withSettingsContext } from '../../../../Core/Settings/Settings';
import { PlatformContext, withPlatformContext } from '@pretzel-aux/common/src/Core/Platform';

type PropsFromSettings = Pick<
  SettingsContext,
  | SettingsKeys.SongRequestNotifyOnRequest
  | SettingsKeys.SongRequestNotifyOnRequestAlert
  | SettingsKeys.SongRequestNotifyOnRequestVolume
  | SettingsKeys.SongRequestNotifyOnBoost
  | SettingsKeys.SongRequestNotifyOnBoostAlert
  | SettingsKeys.SongRequestNotifyOnBoostVolume
  | SettingsKeys.SongRequestQueueVisible
  | 'setSongRequestNotifyOnRequest'
  | 'setSongRequestNotifyOnRequestAlert'
  | 'setSongRequestNotifyOnRequestVolume'
  | 'setSongRequestNotifyOnBoost'
  | 'setSongRequestNotifyOnBoostAlert'
  | 'setSongRequestNotifyOnBoostVolume'
  | 'setSongRequestQueueVisible'
>;

type PropsFromPlatform = Pick<PlatformContext, 'features'>;
type Props = PropsFromSettings & PropsFromPlatform;

class SongRequestsPresentation extends React.Component<Props> {
  public render() {
    if (!this.props.features.songRequests) return null;
    return (
      <SettingsSection title="Song Requests">
        <CheckboxOption
          label="Show Song Requests"
          value={this.props.songRequestQueueVisible}
          onChange={this.props.setSongRequestQueueVisible}
        />

        {/*
        <CheckboxOption
          value={this.props.songRequestNotifyOnRequest}
          onChange={this.props.setSongRequestNotifyOnRequest}
          label="Audio Notification With Every Request"
        />
        <Select options={[]} />
        */}
      </SettingsSection>
    );
  }
}

function mapContextToProps(c: SettingsContext): PropsFromSettings {
  return {
    songRequestNotifyOnRequest: c.songRequestNotifyOnRequest,
    songRequestNotifyOnRequestAlert: c.songRequestNotifyOnRequestAlert,
    songRequestNotifyOnRequestVolume: c.songRequestNotifyOnRequestVolume,
    songRequestNotifyOnBoost: c.songRequestNotifyOnBoost,
    songRequestNotifyOnBoostAlert: c.songRequestNotifyOnBoostAlert,
    songRequestNotifyOnBoostVolume: c.songRequestNotifyOnBoostVolume,
    songRequestQueueVisible: c.songRequestQueueVisible,
    setSongRequestNotifyOnRequest: c.setSongRequestNotifyOnRequest,
    setSongRequestNotifyOnRequestAlert: c.setSongRequestNotifyOnRequestAlert,
    setSongRequestNotifyOnRequestVolume: c.setSongRequestNotifyOnRequestVolume,
    setSongRequestNotifyOnBoost: c.setSongRequestNotifyOnBoost,
    setSongRequestNotifyOnBoostAlert: c.setSongRequestNotifyOnBoostAlert,
    setSongRequestNotifyOnBoostVolume: c.setSongRequestNotifyOnBoostVolume,
    setSongRequestQueueVisible: c.setSongRequestQueueVisible,
  };
}
function mapPlatformToProps(c: PlatformContext): PropsFromPlatform {
  return {
    features: c.features,
  };
}

export const SongRequests = compose(
  withSettingsContext(mapContextToProps),
  withPlatformContext<PropsFromPlatform>(mapPlatformToProps),
)(SongRequestsPresentation);

import * as React from 'react';
import { flowRight as compose } from 'lodash';
import { loader } from 'graphql.macro';
import { withApollo, withMutation } from '@apollo/client/react/hoc';

import { SettingsSection } from '../Components/SettingsSection';
import { PlatformContext, URLS, withPlatformContext } from '../../../Core/Platform';
import styled from 'styled-components/macro';
import { Icon, PretzelColors } from '../../../Styled';
import { Box, Button } from 'grommet';
import { ExternalLink } from '../../ExternalLink/ExternalLink';
import { buildMutationInput, Mutation, MutationOutput } from '../../../Core/GraphQL';
import { RefreshAccount } from '../../../Core/Settings/Queries/types/RefreshAccount';
const RefreshAccountQ = loader('../../../Core/Settings/Queries/refresh-jwt.graphql');

interface PublicProps {}
type PropsFromPlatform = Pick<PlatformContext, 'pretzelUser' | 'openExternalLink' | 'saveData' | 'unloadApp'>;
interface GraphQLProps {
  refreshAccount: Mutation<any, RefreshAccount>;
}

type Props = PublicProps & PropsFromPlatform & GraphQLProps;

interface State {}
export const AccountText = styled.p`
  color: ${PretzelColors.baseWhite};
  font-size: 14px;
  margin-bottom: 5px;
  user-select: text;
`;

export class AccountPresentation extends React.Component<Props, State> {
  state = {};

  public render() {
    let subscriptionLevel: React.ReactNode = ' Premium';
    if (!this.props.pretzelUser.premium) {
      subscriptionLevel = (
        <>
          <span style={{ paddingRight: 20 }}>Free Tier</span>
          <ExternalLink href={URLS.PREMIUM}>
            <Icon name="radio" /> Upgrade Now!
          </ExternalLink>
        </>
      );
    }

    return (
      <SettingsSection title="Account">
        <AccountText>Subscription Level: {subscriptionLevel}</AccountText>
        <AccountText>
          Logged in as: {this.props.pretzelUser.name} ({this.props.pretzelUser.id})
        </AccountText>

        <Box direction="row" pad={{ vertical: 'small', horizontal: 'small' }} width="large" gap="small">
          <Button
            style={{ color: 'white' }}
            size="small"
            plain={false}
            primary={false}
            color="control"
            onClick={this.handleRefresh}
          >
            Refresh
          </Button>
          <Button
            style={{ color: 'white' }}
            size="small"
            plain={false}
            primary={true}
            color="control"
            onClick={this.handleLogout}
          >
            Logout
          </Button>
        </Box>
      </SettingsSection>
    );
  }

  private handleRefresh = () => {
    this.props.refreshAccount(buildMutationInput({})).then((result: MutationOutput<RefreshAccount>) => {
      const newToken = result?.data?.refreshAccount?.token || '';
      this.props.saveData('pretzel_app_token', newToken);
      this.props.unloadApp();
    });
  };

  private handleLogout = () => {
    this.props.saveData('pretzel_app_token', '');
    this.props.unloadApp();
  };
}

function mapPlatformToProps(c: PlatformContext): PropsFromPlatform {
  return {
    saveData: c.saveData,
    pretzelUser: c.pretzelUser,
    openExternalLink: c.openExternalLink,
    unloadApp: c.unloadApp,
  };
}

export const Account = compose(
  withApollo,
  withPlatformContext(mapPlatformToProps),
  withMutation(RefreshAccountQ, { name: 'refreshAccount' }),
)(AccountPresentation);

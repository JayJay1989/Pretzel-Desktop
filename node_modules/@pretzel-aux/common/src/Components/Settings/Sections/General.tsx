import * as React from 'react';
import { compose } from 'react-apollo';
import { SettingsSection } from '../Components/SettingsSection';
import { CheckboxOption } from '../Components/CheckboxOption/CheckboxOption';
import { SettingsContext, withSettingsContext } from '../../../Core/Settings/Settings';
import { PlatformContext, URLS, withPlatformContext } from '../../../Core/Platform';
import styled from 'styled-components/macro';
import { Icon, PretzelColors } from '../../../Styled';
import { Box, Button } from 'grommet';

interface PublicProps {}
type PropsFromPlatform = Pick<PlatformContext, 'pretzelUser' | 'openExternalLink' | 'saveData' | 'unloadApp'>

interface PropsFromContext {
  dailyAffirmations: boolean;
  setDailyAffirmations: (value: boolean) => void;
}

type Props = PublicProps & PropsFromContext & PropsFromPlatform;

interface State {}
export const SubscriptionLabel = styled.p`
  color: ${PretzelColors.baseWhite};
  font-size: 14px;
  margin-bottom: 5px;
`;

export class GeneralPresentation extends React.Component<Props, State> {
  state = {};

  public render() {
    let subscriptionLevel: React.ReactNode = " Premium";
    if (!this.props.pretzelUser.premium) {
      subscriptionLevel = (
        <>
          <span style={{paddingRight: 20}}>Free Tier</span>
          <a href={URLS.PREMIUM} target="_blank"><Icon name="radio" /> Upgrade Now!</a>
        </>
      )
    }

    return (
      <SettingsSection title="General">
        <CheckboxOption
          label="Show Daily Affirmations"
          onChange={this.onAffirmationsChanged}
          value={this.props.dailyAffirmations}
        />
        <Box pad={{ horizontal: 'small', vertical: 'small' }}>
          <SubscriptionLabel>
            Subscription Level: { subscriptionLevel }
          </SubscriptionLabel>
        </Box>
        <Box pad={{ horizontal: 'small'}} width='small' >
          <Button
            style={{color: 'white'}}
            size="small"
            plain={false}
            primary={true}
            color="control"
            onClick={this.handleLogout}>
              Logout
          </Button>
        </Box>
      </SettingsSection>
    );
  }

  private onAffirmationsChanged = (value: boolean) => {
    this.props.setDailyAffirmations(value);
  };
  private handleLogout = () => {
    this.props.saveData('pretzel_app_token', '');
    this.props.unloadApp();
  }

}

function mapContextToProps(c: SettingsContext): PropsFromContext {
  return {
    dailyAffirmations: c.dailyAffirmations,
    setDailyAffirmations: c.setDailyAffirmations,
  };
}

function mapPlatformToProps(c: PlatformContext): PropsFromPlatform {
  return {
    saveData: c.saveData,
    pretzelUser: c.pretzelUser,
    openExternalLink: c.openExternalLink,
    unloadApp: c.unloadApp,
  }
}

export const General = compose(
  withPlatformContext(mapPlatformToProps),
  withSettingsContext(mapContextToProps)
)(GeneralPresentation);

import * as React from 'react';
import { flowRight as compose } from 'lodash';
import { SettingsSection } from '../Components/SettingsSection';
import { CheckboxOption } from '../Components/CheckboxOption/CheckboxOption';
import { NumberSetting } from '../Components/NumberSetting/NumberSetting';
import { SettingsContext, withSettingsContext } from '../../../Core/Settings/Settings';
import { PlatformContext, withPlatformContext } from '../../../Core/Platform';

interface PublicProps {}
type PropsFromPlatform = Pick<PlatformContext, 'pretzelUser' | 'openExternalLink' | 'saveData' | 'unloadApp'>;

interface PropsFromContext {
  notifyDelay: number;
  notifyInChat: boolean;
  // notifyOnlyWhenLive: boolean;
  setNotifyDelay: (value: number) => void;
  setNotifyInChat: (value: boolean) => void;
  // setNotifyOnlyWhenLive: (value: boolean) => void;
}

type Props = PublicProps & PropsFromContext & PropsFromPlatform;

export class WhatsPlayingPresentation extends React.Component<Props> {
  state = {};

  public render() {
    return (
      <SettingsSection title="What's Playing">
        {/* TODO Force true and disable this for non-premium */}
        <CheckboxOption
          label={this.props.pretzelUser.premium
            ? `Announce what's playing in chat`
            : `Announce what's playing in chat (can be disabled with Premium)`}
          onChange={this.onNotifyInChatChanged}
          value={this.props.pretzelUser.premium ? this.props.notifyInChat : true}
          disabled={!this.props.pretzelUser.premium}
          title="Announce what's playing in Chat"
        />
        {/* <CheckboxOption
          label="Notify only when Live"
          onChange={this.onNotifyOnlyWhenLiveChanged}
          value={this.props.notifyOnlyWhenLive}
          title="Notification will be added shortly."
        /> */}
        <NumberSetting
          title="What's playing notification delay"
          min={0}
          max={30}
          pattern="[0-9]{1,2}"
          units={this.props.notifyDelay === 1 ? 'second' : 'seconds'}
          value={this.props.notifyDelay}
          onChange={this.onNotifyDelayChanged}
        />
      </SettingsSection>
    );
  }

  private onNotifyInChatChanged = (value: boolean) => {
    this.props.setNotifyInChat(value);
  };
  // private onNotifyOnlyWhenLiveChanged = (value: boolean) => {
  //   this.props.setNotifyOnlyWhenLive(value);
  // };
  private onNotifyDelayChanged = (value: number | null) => {
    if (value !== null) {
      this.props.setNotifyDelay(value);
    }
  };
}

function mapContextToProps(c: SettingsContext): PropsFromContext {
  return {
    notifyDelay: c.notifyDelay,
    notifyInChat: c.notifyInChat,
    // notifyOnlyWhenLive: c.notifyOnlyWhenLive,
    setNotifyDelay: c.setNotifyDelay,
    setNotifyInChat: c.setNotifyInChat,
    // setNotifyOnlyWhenLive: c.setNotifyOnlyWhenLive,
  };
}

function mapPlatformToProps(c: PlatformContext): PropsFromPlatform {
  return {
    saveData: c.saveData,
    pretzelUser: c.pretzelUser,
    openExternalLink: c.openExternalLink,
    unloadApp: c.unloadApp,
  };
}

export const WhatsPlaying = compose(
  withPlatformContext(mapPlatformToProps),
  withSettingsContext(mapContextToProps)
)(WhatsPlayingPresentation);

import React from 'react';
import styled from 'styled-components';
import { PretzelColors } from '../../../../Styled';
import { SettingsSection } from '../../Components/SettingsSection';
import { ConnectedSearchBox } from '../../../Search/Components/SearchBox';
import { Box, Heading } from 'grommet';

const Wrapper = styled.div`
  font-size: 14px;
  color: ${PretzelColors.baseWhite};
  padding: 0 10px;
`;
const KeybindsWrapper = styled.div`
  display: flex;
  flex-wrap: wrap;
  ${''/* justify-content: space-around; */}
  height: 340px;
  ${''/* flex-direction: column; */}
  align-content: center;
`;
interface KeybindWrapperProperties {
  fillRow?: boolean;
}
const KeybindWrapper = styled.div<KeybindWrapperProperties>`
  display: flex;
  flex-direction: row;
  align-items: center;
  margin: 10px 0;
  justify-content: flex-start;
  min-width: ${({fillRow}) => fillRow ? '100%' : 0};
`;
const KeyMultiWrapper = styled.div`
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
`;
interface KeyWrapperProperties {
  wide?: boolean;
}
const KeyWrapper = styled.div<KeyWrapperProperties>`
  padding: 10px;
  min-width: 45px;
  border: 1px solid ${PretzelColors.baseBackground};
  border-radius: 4px;
  color: ${PretzelColors.baseBackground};
  background: ${PretzelColors.baseWhite};
  text-align: center;
  display: inline-block;
  width: ${(props) => props.wide ? '90px' : 'auto'};
  font-weight: bold;
`;
const KeyDetail = styled.div`
  width: 130px;
`;
const KeybindSeparator = styled.div`
  margin: 0 3px;
  font-weight: bold;
`;
const KeySpacer = styled.div`
  ${'' /* width: 115px; */}
  width: 110px;
  display: flex;
  ${'' /* justify-content: center; */}
  justify-content: flex-end;
  padding: 0 10px;
`;

const Notice = styled.div`
  color: ${PretzelColors.baseMuted};
`;
interface Keybind {
  groupName: string;
  keys: {
    wide?: boolean;
    wideOther?: boolean;
    keyName: string;
    keyNameOther?: string;
    detail: string;
    fillRow?: boolean;
    multi: boolean
  }[]
}
const webKeybinds:Keybind[] = [
  {
    groupName: 'Playback',
    keys: [
      {
        keyName: 'Space',
        multi: false,
        detail: 'Play/Pause',
        wide: true,
        fillRow: true,
      },
      {
        keyName: '←',
        multi: false,
        detail: 'Previous track',
      },
      {
        keyName: '→',
        multi: false,
        detail: 'Next track',
      }
    ],
  },
  {
    groupName: 'Preference',
    keys: [
      {
        keyName: 'L',
        multi: false,
        detail: 'Like track',
      },
      {
        keyName: 'B',
        multi: false,
        detail: 'Blacklist track',
      }
    ],
  },
  {
    groupName: 'Volume control',
    keys: [
      {
        keyName: '+/=',
        multi: false,
        detail: 'Increase volume',
      },
      {
        keyName: '-',
        multi: false,
        detail: 'Decrease volume',
      },
      {
        keyName: '1',
        keyNameOther: '0',
        multi: true,
        detail: 'Set volume %',
        fillRow: true,
      }
    ],
  }
];

const LocalWindow = () => (
  <Box margin={{left:"small"}}>
    <Heading level="5" size="small" color={PretzelColors.brandGreen2}>
      Local Window Keybinds
    </Heading>
    <Notice>These Local Keybinds are only active when the player controls are visible and focused.</Notice>
    <KeybindsWrapper>
      {webKeybinds.map((group, gid) => {
        return group.keys.map((key, id) => {
          let keybind;
          if (key.multi) {
            keybind = (
              <KeyMultiWrapper>
                <KeyWrapper wide={key.wide}>{key.keyName}</KeyWrapper>
                <KeybindSeparator> - </KeybindSeparator>
                <KeyWrapper wide={key.wideOther}>{key.keyNameOther}</KeyWrapper>
              </KeyMultiWrapper>
            );
          } else {
            keybind = (
              <KeyWrapper wide={key.wide}>
                {key.keyName}
              </KeyWrapper>
            );
          }
          return (
            <KeybindWrapper key={id} fillRow={key.fillRow}>
              <KeySpacer>
                {keybind}
              </KeySpacer>
              <KeyDetail>{key.detail}</KeyDetail>
            </KeybindWrapper>
          );
        });
      })}
    </KeybindsWrapper>
  </Box>
);

export default LocalWindow;

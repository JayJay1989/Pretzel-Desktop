import React from 'react';
import Select from 'react-select';
import { flowRight as compose } from 'lodash';

import {AudioOutput, SettingsContext, withSettingsContext} from "../../../../../Core/Settings/Settings";

interface PropsFromContext {
  audioOutputList: AudioOutput[];
}
interface ComponentProps {
  onChange: (val:string) => void,
  value: string,
}

type Props = PropsFromContext & ComponentProps;

interface State {}

interface SelectOption {
  value: string;
  label: string;
}

export class AudioOutputSelectorPresentation extends React.Component<Props, State> {
  public render() {
    const options: SelectOption[] = this.props.audioOutputList
      .map(output => ({ label: output.label, value: output.device.deviceId }))
      .sort((a, b) => (a.label < b.label ? -1 : a.label > b.label ? 1 : 0));
    const selected = options.find(option => option.value === this.props.value);
    return (
        <Select
          name="outputs"
          value={selected}
          options={options}
          onChange={(val: SelectOption) => this.props.onChange(val.value)}
          className="audioOutputs"
          placeholder="Default"
        />
    );
  }

}

function mapContextToProps(c: SettingsContext): PropsFromContext {
  return {
    audioOutputList: c.audioOutputList,
  };
}

const AudioOutputSelector = compose(withSettingsContext(mapContextToProps))(AudioOutputSelectorPresentation);

export default AudioOutputSelector;

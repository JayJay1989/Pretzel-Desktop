import React from 'react';
import styled from 'styled-components';
import Select from 'react-select';
import Scrollbars from 'react-custom-scrollbars';
import { PretzelColors } from '@pretzel-aux/common/src/Styled';
import { NumberSetting } from '../../../Components/NumberSetting/NumberSetting';
import AudioSetting from './AudioOutputKeybindSelector';
import { KeyAction, formatForDisplay, formatForStore } from '../KeyAction';
import { customDropDownStyles } from '../../Audio/Components/CustomSelectStyles';

const ExternalWrapper = styled.div`
  border-bottom: 1px solid rgba(255, 255, 255, 0.2);
  margin-right: 10px;
  padding-bottom: 19px;
`;

const OptionNote = styled.div`
  padding-top: 8px;
  font-size: 13px;
  color: ${PretzelColors.baseMuted};
`;

const Wrapper = styled.div`
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: baseline;

  position: relative;
  padding-top: 20px;
  margin-top: -1px;
  margin-right: 20px;
`;

type CustomInputProps = {
  error: boolean;
  capturing: boolean;
};
function getBorderColor(props: CustomInputProps): string {
  if (props.error) {
    return '#e70034 !important';
  } else if (props.capturing) {
    return `${PretzelColors.brandGreen2} !important`;
  } else {
    return '#d9d9d9 #ccc #b3b3b3';
  }
}
const Input = styled.input`
  border-color: ${(props: CustomInputProps) => getBorderColor(props)};
  border-radius: 4px;
  border: 1px solid #ccc;
  cursor: ${props => (props.disabled ? 'not-allowed' : 'default')};
  display: table;
  border-spacing: 0;
  border-collapse: separate;
  height: 36px;
  outline: none;
  overflow: hidden;
  position: relative;
  width: 100%;
  line-height: 34px;
  white-space: nowrap;
  font-size: 14px;
  padding: 0 10px;
  color: transparent !important;
  text-shadow: 0 0 0 ${PretzelColors.baseWhite};

  &:focus {
    border-color: ${PretzelColors.brandGreen2};
  }
`;

const OptionWrapper = styled.div`
  color: ${PretzelColors.baseWhite};
`;

// @ts-ignore
const Action = styled(OptionWrapper)`
  flex: 1.2;
`;

const Value = styled(OptionWrapper)`
  flex: 1;
  margin: 0 10px;
`;

const Bind = styled(OptionWrapper)`
  flex: 1.2;
`;

const OptionHeading = styled.p`
  font-weight: 600;
`;

const Delete = styled.div`
  position: absolute;
  top: 12px;
  right: -20px;
  color: ${PretzelColors.baseWhite};
  &:hover {
    color: #e70034;
  }
  cursor: pointer;
`;

const Icon = styled.i`
  font-size: 16px;
  cursor: pointer;
`;

const MenuRender = (params: any) => {
  // @ts-ignore
  const menu = Select.defaultProps.menuRenderer(params);

  const scrollBarProps = {
    autoHeight: true,
    autoHeightMin: 0,
    autoHeightMax: 115,
  };

  return <Scrollbars {...scrollBarProps}>{menu}</Scrollbars>;
};

type ValuePickerProps = {
  actionValue: KeyAction;
  value?: string | number;
  updateValue: (a: any) => void;
};
const ValuePicker = ({ actionValue, value, updateValue }: ValuePickerProps) => {
  let valuePicker = null;
  if (actionValue.valueType === 'number') {
    valuePicker = (
      <NumberSetting
        title={actionValue.valueTitle}
        min={actionValue.minValue}
        max={actionValue.maxValue}
        pattern={actionValue.pattern}
        units={value === 1 ? actionValue.valueUnit : actionValue.valueUnitPlural}
        value={formatForDisplay(actionValue, value as number)}
        onChange={val => updateValue(formatForStore(actionValue, val))}
      />
    );
  } else if (actionValue.valueType === 'dropdown') {
    // @ts-ignore
    valuePicker = (
      <Select
        name="outputs"
        value={value}
        options={actionValue.dropdown}
        onChange={updateValue}
        searchable={false}
        clearable={false}
        className="keybindActions"
        valueKey="value"
        labelKey="label"
        placeholder="Setting"
        menuRenderer={MenuRender}
        styles={customDropDownStyles}
      />
    );
  } else if (actionValue.valueType === 'audio') {
    valuePicker = <AudioSetting value={value} onChange={updateValue} menuRenderer={MenuRender} />;
  }
  return valuePicker;
};

type KeybindProps = {
  action: any;
  value: any;
  note: any;
  valueText: any;
  bind: any;
  actions: any;
  updateAction: any;
  updateValue: any;
  actionValue: any;
  deleteKeybind: any;
  activateKeyCapture: any;
  deactivateKeyCapture: any;
  capturing: boolean;
  error: any;
};
const Keybind = ({
  value,
  note,
  valueText,
  bind,
  actions,
  updateAction,
  updateValue,
  actionValue,
  deleteKeybind,
  activateKeyCapture,
  deactivateKeyCapture,
  error,
  capturing,
}: KeybindProps) => {
  return (
    <ExternalWrapper>
      <Wrapper>
        <Delete onClick={deleteKeybind}>
          <Icon className="pretzel-icon-close_circle" />
        </Delete>
        <Action className="no-drag">
          <OptionHeading>Action</OptionHeading>
          <Select
            name="outputs"
            value={actionValue}
            options={actions}
            onChange={updateAction}
            searchable={false}
            clearable={false}
            className="keybindActions"
            getOptionValue={(o: any) => o.value}
            getOptionlabel={(o: any) => o.label}
            placeholder="Unassigned"
            menuRenderer={MenuRender}
            styles={customDropDownStyles}
          />
        </Action>
        <Value>
          {actionValue && <OptionHeading>{valueText}</OptionHeading>}
          {actionValue && <ValuePicker actionValue={actionValue} value={value} updateValue={updateValue} />}
        </Value>
        <Bind>
          <OptionHeading>Keybind</OptionHeading>
          <Input
            type="text"
            value={bind}
            onChange={e => e.preventDefault()}
            onFocus={activateKeyCapture}
            onBlur={deactivateKeyCapture}
            error={error}
            capturing={capturing}
          />
        </Bind>
      </Wrapper>
      {note ? <OptionNote>{note}</OptionNote> : null}
    </ExternalWrapper>
  );
};

export default Keybind;

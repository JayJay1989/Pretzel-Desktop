import * as React from 'react';
import { flowRight as compose } from 'lodash';
import { SettingsSection } from '../../Components/SettingsSection';
import { CheckboxOption } from '../../Components/CheckboxOption/CheckboxOption';
import { SettingsContext, SettingsKeys, withSettingsContext } from '../../../../Core/Settings/Settings';
import { PlatformContext, withPlatformContext } from '../../../../Core/Platform';
import LocalWindow from './LocalWindow';
import { GlobalWindow } from './GlobalWindow';

type PropsFromSettings = Pick<SettingsContext, SettingsKeys.BindMediaHotkeys | 'setBindMediaHotkeys'>;

type PropsFromPlatform = Pick<PlatformContext, 'features'>;

type Props = PropsFromSettings & PropsFromPlatform;

interface State {}

export class GeneralPresentation extends React.Component<Props, State> {
  state = {};

  public render() {
    return (
      <SettingsSection title="Keybinds">
        <CheckboxOption
          label="Use media keys for play/pause, next and previous track"
          onChange={this.props.setBindMediaHotkeys}
          value={this.props.bindMediaHotkeys}
        />
        <GlobalWindow />
        <LocalWindow />
      </SettingsSection>
    );
  }
}

function mapContextToProps(c: SettingsContext): PropsFromSettings {
  return {
    bindMediaHotkeys: c.bindMediaHotkeys,
    setBindMediaHotkeys: c.setBindMediaHotkeys,
  };
}
function mapPlatformToProps(c: PlatformContext): PropsFromPlatform {
  return {
    features: c.features,
  };
}

export const Keybinds = compose(
  withSettingsContext(mapContextToProps),
  withPlatformContext<PropsFromPlatform>(mapPlatformToProps),
)(GeneralPresentation);

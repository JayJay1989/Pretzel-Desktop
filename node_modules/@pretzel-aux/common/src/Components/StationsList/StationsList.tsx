import * as React from 'react';
import { graphql, QueryControls } from '@apollo/client/react/hoc';
import { flowRight as compose } from 'lodash';
import { loader } from 'graphql.macro';
import { StationCard } from './Components/StationCard';
import { MusicList } from '../../Styled';
import { StationsListQuery } from './types/StationsListQuery';
const stationsQuery = loader('./stations.graphql');

interface GraphqlProps {
  data: QueryControls & StationsListQuery;
}

type Props = GraphqlProps;

interface State {
  loadingMore: boolean;
}

export class StationsListPresentation extends React.Component<Props, State> {
  state: State = {
    loadingMore: false,
  };

  public render() {
    const stations = this.props.data.loading
      ? null
      : this.props.data.stations.edges.map(stationEdge => (
          <StationCard key={stationEdge.node.id} station={stationEdge.node} />
        ));
    const hasMore = this.props.data.stations && this.props.data.stations.pageInfo.hasNextPage;
    return (
      <MusicList
        title="Stations"
        items={stations}
        hasMore={hasMore}
        onMore={this.onMore}
        loading={this.state.loadingMore}
      />
    );
  }

  private onMore = () => {
    const after = this.props.data.stations.pageInfo.endCursor || '';
    console.debug('Loading More', {
      type: 'station',
      currentLength: this.props.data.stations.edges.length,
      after,
    });
    this.setState({ loadingMore: true });
    this.props.data.fetchMore({
      variables: { after },
      updateQuery: (previousQueryResult: StationsListQuery, { fetchMoreResult }) => {
        this.setState({ loadingMore: false });
        if (!fetchMoreResult) {
          return previousQueryResult;
        }
        return {
          stations: Object.assign({}, fetchMoreResult.stations, {
            edges: [...previousQueryResult.stations.edges, ...fetchMoreResult.stations.edges],
          }),
        };
      },
    });
  };
}

export const StationsList = compose(
  graphql(stationsQuery, {
    options: {
      variables: {
        first: 80,
      },
    },
  }),
)(StationsListPresentation);

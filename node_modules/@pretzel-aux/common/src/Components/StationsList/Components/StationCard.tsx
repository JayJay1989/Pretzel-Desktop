import * as React from 'react';
import { Station } from '../schema';
import { Gradient } from './Styles';
import { compose } from 'react-apollo';
import { Box, Text } from 'grommet';
import { PlayerContext, withPlayerContext } from '../../../Core/Player/PlayerContext';
import { Icon, LibraryIcons, MusicCard, Night, PretzelColors, Square } from '../../../Styled';
import { minutesOrHours } from '../../../Util';

type PropsFromPlayer = Pick<PlayerContext, 'playSegment' | 'activeSegment'>;

interface PublicProps {
  station: Station;
}

type Props = PublicProps & PropsFromPlayer;

export class StationCardPresentation extends React.Component<Props> {
  public render() {
    const { station, activeSegment } = this.props;
    const isPlaying = activeSegment && activeSegment.id === station.id;
    const isLiked = station.id === 'LIKED';
    const TheIcon = LibraryIcons[station.icon] || LibraryIcons["Logo"];
    const art = (
      <Square>
        <Gradient colors={[station.color1, station.color2]} />
        <Box fill justify="center" align="center" style={{ position: 'relative' }}>
          <div style={{width: 72, height: 72}}>
            <TheIcon />
          </div>
          {/*<Icon name={station.icon} color={PretzelColors.baseWhite} size={72} />*/}
        </Box>
      </Square>
    );
    const text = (
      <>
        <Text color={Night.textTitles}>{station.name}</Text>
        <Text size="xsmall">{station.description}</Text>
        <Box flex="grow" justify="end">
          {isLiked ? null : (
            <Text size="10px" color={Night.textMuted} margin={{ top: '16px' }} align-self="end">
              {station.stats.totalCount} Songs&nbsp;&nbsp;&nbsp;â€¢&nbsp;&nbsp;&nbsp;
              {minutesOrHours(station.stats.duration)}
            </Text>
          )}
        </Box>
      </>
    );
    return <MusicCard art={art} text={text} active={isPlaying} onClick={this.handleClick} />;
  }
  private handleClick = () => {
    this.props.playSegment({ id: this.props.station.id });
  };
}

function mapContextToProps(c: PlayerContext): PropsFromPlayer {
  return {
    activeSegment: c.activeSegment,
    playSegment: c.playSegment,
  };
}

export const StationCard = compose(
  withPlayerContext(mapContextToProps)
)(StationCardPresentation);

/* tslint:disable */
/* eslint-disable */
// @generated
// This file was automatically generated and should not be edited.

// ====================================================
// GraphQL query operation: SegmentQuery
// ====================================================

export interface SegmentQuery_segment_Mix_tracks_edges_node_artists {
  __typename: "Artist";
  id: string;
  /**
   * The segment name
   */
  name: string;
}

export interface SegmentQuery_segment_Mix_tracks_edges_node_album {
  __typename: "Album";
  id: string;
  title: string;
}

export interface SegmentQuery_segment_Mix_tracks_edges_node_self {
  __typename: "SelfTrack";
  liked: boolean;
  blacklisted: boolean;
}

export interface SegmentQuery_segment_Mix_tracks_edges_node {
  __typename: "Track";
  id: string;
  title: string;
  duration: number | null;
  artworkGuid: string;
  explicit: boolean | null;
  instrumental: boolean | null;
  youtubeSafe: boolean;
  artists: SegmentQuery_segment_Mix_tracks_edges_node_artists[];
  album: SegmentQuery_segment_Mix_tracks_edges_node_album | null;
  self: SegmentQuery_segment_Mix_tracks_edges_node_self;
}

export interface SegmentQuery_segment_Mix_tracks_edges {
  __typename: "TrackEdge";
  /**
   * The item at the end of the edge.
   */
  node: SegmentQuery_segment_Mix_tracks_edges_node | null;
}

export interface SegmentQuery_segment_Mix_tracks_pageInfo {
  __typename: "PageInfo";
  /**
   * When paginating forwards, the cursor to continue.
   */
  endCursor: string | null;
  /**
   * When paginating forwards, are there more items?
   */
  hasNextPage: boolean;
  /**
   * When paginating backwards, are there more items?
   */
  hasPreviousPage: boolean;
  /**
   * When paginating backwards, the cursor to continue.
   */
  startCursor: string | null;
}

export interface SegmentQuery_segment_Mix_tracks {
  __typename: "TrackConnection";
  /**
   * A list of edges.
   */
  edges: (SegmentQuery_segment_Mix_tracks_edges | null)[] | null;
  /**
   * Information to aid in pagination.
   */
  pageInfo: SegmentQuery_segment_Mix_tracks_pageInfo;
}

export interface SegmentQuery_segment_Mix_stats {
  __typename: "SegmentStats";
  /**
   * The number of seconds in the segment
   */
  duration: number;
  /**
   * The popularity of a segment, larger == more popular
   */
  popularity: number;
  /**
   * The total number of tracks in the segment
   */
  totalCount: number;
}

export interface SegmentQuery_segment_Mix {
  __typename: "Mix";
  id: string;
  /**
   * The segment name
   */
  name: string;
  tracks: SegmentQuery_segment_Mix_tracks;
  /**
   * Stats for this segment
   */
  stats: SegmentQuery_segment_Mix_stats;
}

export interface SegmentQuery_segment_Album_tracks_edges_node_artists {
  __typename: "Artist";
  id: string;
  /**
   * The segment name
   */
  name: string;
}

export interface SegmentQuery_segment_Album_tracks_edges_node_album {
  __typename: "Album";
  id: string;
  title: string;
}

export interface SegmentQuery_segment_Album_tracks_edges_node_self {
  __typename: "SelfTrack";
  liked: boolean;
  blacklisted: boolean;
}

export interface SegmentQuery_segment_Album_tracks_edges_node {
  __typename: "Track";
  id: string;
  title: string;
  duration: number | null;
  artworkGuid: string;
  explicit: boolean | null;
  instrumental: boolean | null;
  youtubeSafe: boolean;
  artists: SegmentQuery_segment_Album_tracks_edges_node_artists[];
  album: SegmentQuery_segment_Album_tracks_edges_node_album | null;
  self: SegmentQuery_segment_Album_tracks_edges_node_self;
}

export interface SegmentQuery_segment_Album_tracks_edges {
  __typename: "TrackEdge";
  /**
   * The item at the end of the edge.
   */
  node: SegmentQuery_segment_Album_tracks_edges_node | null;
}

export interface SegmentQuery_segment_Album_tracks_pageInfo {
  __typename: "PageInfo";
  /**
   * When paginating forwards, the cursor to continue.
   */
  endCursor: string | null;
  /**
   * When paginating forwards, are there more items?
   */
  hasNextPage: boolean;
  /**
   * When paginating backwards, are there more items?
   */
  hasPreviousPage: boolean;
  /**
   * When paginating backwards, the cursor to continue.
   */
  startCursor: string | null;
}

export interface SegmentQuery_segment_Album_tracks {
  __typename: "TrackConnection";
  /**
   * A list of edges.
   */
  edges: (SegmentQuery_segment_Album_tracks_edges | null)[] | null;
  /**
   * Information to aid in pagination.
   */
  pageInfo: SegmentQuery_segment_Album_tracks_pageInfo;
}

export interface SegmentQuery_segment_Album_stats {
  __typename: "SegmentStats";
  /**
   * The number of seconds in the segment
   */
  duration: number;
  /**
   * The popularity of a segment, larger == more popular
   */
  popularity: number;
  /**
   * The total number of tracks in the segment
   */
  totalCount: number;
}

export interface SegmentQuery_segment_Album {
  __typename: "Album";
  id: string;
  /**
   * The segment name
   */
  name: string;
  tracks: SegmentQuery_segment_Album_tracks;
  /**
   * Stats for this segment
   */
  stats: SegmentQuery_segment_Album_stats;
  title: string;
  artworkGuid: string;
}

export interface SegmentQuery_segment_Artist_tracks_edges_node_artists {
  __typename: "Artist";
  id: string;
  /**
   * The segment name
   */
  name: string;
}

export interface SegmentQuery_segment_Artist_tracks_edges_node_album {
  __typename: "Album";
  id: string;
  title: string;
}

export interface SegmentQuery_segment_Artist_tracks_edges_node_self {
  __typename: "SelfTrack";
  liked: boolean;
  blacklisted: boolean;
}

export interface SegmentQuery_segment_Artist_tracks_edges_node {
  __typename: "Track";
  id: string;
  title: string;
  duration: number | null;
  artworkGuid: string;
  explicit: boolean | null;
  instrumental: boolean | null;
  youtubeSafe: boolean;
  artists: SegmentQuery_segment_Artist_tracks_edges_node_artists[];
  album: SegmentQuery_segment_Artist_tracks_edges_node_album | null;
  self: SegmentQuery_segment_Artist_tracks_edges_node_self;
}

export interface SegmentQuery_segment_Artist_tracks_edges {
  __typename: "TrackEdge";
  /**
   * The item at the end of the edge.
   */
  node: SegmentQuery_segment_Artist_tracks_edges_node | null;
}

export interface SegmentQuery_segment_Artist_tracks_pageInfo {
  __typename: "PageInfo";
  /**
   * When paginating forwards, the cursor to continue.
   */
  endCursor: string | null;
  /**
   * When paginating forwards, are there more items?
   */
  hasNextPage: boolean;
  /**
   * When paginating backwards, are there more items?
   */
  hasPreviousPage: boolean;
  /**
   * When paginating backwards, the cursor to continue.
   */
  startCursor: string | null;
}

export interface SegmentQuery_segment_Artist_tracks {
  __typename: "TrackConnection";
  /**
   * A list of edges.
   */
  edges: (SegmentQuery_segment_Artist_tracks_edges | null)[] | null;
  /**
   * Information to aid in pagination.
   */
  pageInfo: SegmentQuery_segment_Artist_tracks_pageInfo;
}

export interface SegmentQuery_segment_Artist_stats {
  __typename: "SegmentStats";
  /**
   * The number of seconds in the segment
   */
  duration: number;
  /**
   * The popularity of a segment, larger == more popular
   */
  popularity: number;
  /**
   * The total number of tracks in the segment
   */
  totalCount: number;
}

export interface SegmentQuery_segment_Artist {
  __typename: "Artist";
  id: string;
  /**
   * The segment name
   */
  name: string;
  tracks: SegmentQuery_segment_Artist_tracks;
  /**
   * Stats for this segment
   */
  stats: SegmentQuery_segment_Artist_stats;
  artworkGuid: string;
}

export interface SegmentQuery_segment_Label_tracks_edges_node_artists {
  __typename: "Artist";
  id: string;
  /**
   * The segment name
   */
  name: string;
}

export interface SegmentQuery_segment_Label_tracks_edges_node_album {
  __typename: "Album";
  id: string;
  title: string;
}

export interface SegmentQuery_segment_Label_tracks_edges_node_self {
  __typename: "SelfTrack";
  liked: boolean;
  blacklisted: boolean;
}

export interface SegmentQuery_segment_Label_tracks_edges_node {
  __typename: "Track";
  id: string;
  title: string;
  duration: number | null;
  artworkGuid: string;
  explicit: boolean | null;
  instrumental: boolean | null;
  youtubeSafe: boolean;
  artists: SegmentQuery_segment_Label_tracks_edges_node_artists[];
  album: SegmentQuery_segment_Label_tracks_edges_node_album | null;
  self: SegmentQuery_segment_Label_tracks_edges_node_self;
}

export interface SegmentQuery_segment_Label_tracks_edges {
  __typename: "TrackEdge";
  /**
   * The item at the end of the edge.
   */
  node: SegmentQuery_segment_Label_tracks_edges_node | null;
}

export interface SegmentQuery_segment_Label_tracks_pageInfo {
  __typename: "PageInfo";
  /**
   * When paginating forwards, the cursor to continue.
   */
  endCursor: string | null;
  /**
   * When paginating forwards, are there more items?
   */
  hasNextPage: boolean;
  /**
   * When paginating backwards, are there more items?
   */
  hasPreviousPage: boolean;
  /**
   * When paginating backwards, the cursor to continue.
   */
  startCursor: string | null;
}

export interface SegmentQuery_segment_Label_tracks {
  __typename: "TrackConnection";
  /**
   * A list of edges.
   */
  edges: (SegmentQuery_segment_Label_tracks_edges | null)[] | null;
  /**
   * Information to aid in pagination.
   */
  pageInfo: SegmentQuery_segment_Label_tracks_pageInfo;
}

export interface SegmentQuery_segment_Label_stats {
  __typename: "SegmentStats";
  /**
   * The number of seconds in the segment
   */
  duration: number;
  /**
   * The popularity of a segment, larger == more popular
   */
  popularity: number;
  /**
   * The total number of tracks in the segment
   */
  totalCount: number;
}

export interface SegmentQuery_segment_Label {
  __typename: "Label";
  id: string;
  /**
   * The segment name
   */
  name: string;
  tracks: SegmentQuery_segment_Label_tracks;
  /**
   * Stats for this segment
   */
  stats: SegmentQuery_segment_Label_stats;
  artworkGuid: string;
}

export interface SegmentQuery_segment_Playlist_tracks_edges_node_artists {
  __typename: "Artist";
  id: string;
  /**
   * The segment name
   */
  name: string;
}

export interface SegmentQuery_segment_Playlist_tracks_edges_node_album {
  __typename: "Album";
  id: string;
  title: string;
}

export interface SegmentQuery_segment_Playlist_tracks_edges_node_self {
  __typename: "SelfTrack";
  liked: boolean;
  blacklisted: boolean;
}

export interface SegmentQuery_segment_Playlist_tracks_edges_node {
  __typename: "Track";
  id: string;
  title: string;
  duration: number | null;
  artworkGuid: string;
  explicit: boolean | null;
  instrumental: boolean | null;
  youtubeSafe: boolean;
  artists: SegmentQuery_segment_Playlist_tracks_edges_node_artists[];
  album: SegmentQuery_segment_Playlist_tracks_edges_node_album | null;
  self: SegmentQuery_segment_Playlist_tracks_edges_node_self;
}

export interface SegmentQuery_segment_Playlist_tracks_edges {
  __typename: "TrackEdge";
  /**
   * The item at the end of the edge.
   */
  node: SegmentQuery_segment_Playlist_tracks_edges_node | null;
}

export interface SegmentQuery_segment_Playlist_tracks_pageInfo {
  __typename: "PageInfo";
  /**
   * When paginating forwards, the cursor to continue.
   */
  endCursor: string | null;
  /**
   * When paginating forwards, are there more items?
   */
  hasNextPage: boolean;
  /**
   * When paginating backwards, are there more items?
   */
  hasPreviousPage: boolean;
  /**
   * When paginating backwards, the cursor to continue.
   */
  startCursor: string | null;
}

export interface SegmentQuery_segment_Playlist_tracks {
  __typename: "TrackConnection";
  /**
   * A list of edges.
   */
  edges: (SegmentQuery_segment_Playlist_tracks_edges | null)[] | null;
  /**
   * Information to aid in pagination.
   */
  pageInfo: SegmentQuery_segment_Playlist_tracks_pageInfo;
}

export interface SegmentQuery_segment_Playlist_stats {
  __typename: "SegmentStats";
  /**
   * The number of seconds in the segment
   */
  duration: number;
  /**
   * The popularity of a segment, larger == more popular
   */
  popularity: number;
  /**
   * The total number of tracks in the segment
   */
  totalCount: number;
}

export interface SegmentQuery_segment_Playlist {
  __typename: "Playlist";
  id: string;
  /**
   * The segment name
   */
  name: string;
  tracks: SegmentQuery_segment_Playlist_tracks;
  /**
   * Stats for this segment
   */
  stats: SegmentQuery_segment_Playlist_stats;
  description: string;
  artworkGuid: string;
}

export interface SegmentQuery_segment_Station_tracks_edges_node_artists {
  __typename: "Artist";
  id: string;
  /**
   * The segment name
   */
  name: string;
}

export interface SegmentQuery_segment_Station_tracks_edges_node_album {
  __typename: "Album";
  id: string;
  title: string;
}

export interface SegmentQuery_segment_Station_tracks_edges_node_self {
  __typename: "SelfTrack";
  liked: boolean;
  blacklisted: boolean;
}

export interface SegmentQuery_segment_Station_tracks_edges_node {
  __typename: "Track";
  id: string;
  title: string;
  duration: number | null;
  artworkGuid: string;
  explicit: boolean | null;
  instrumental: boolean | null;
  youtubeSafe: boolean;
  artists: SegmentQuery_segment_Station_tracks_edges_node_artists[];
  album: SegmentQuery_segment_Station_tracks_edges_node_album | null;
  self: SegmentQuery_segment_Station_tracks_edges_node_self;
}

export interface SegmentQuery_segment_Station_tracks_edges {
  __typename: "TrackEdge";
  /**
   * The item at the end of the edge.
   */
  node: SegmentQuery_segment_Station_tracks_edges_node | null;
}

export interface SegmentQuery_segment_Station_tracks_pageInfo {
  __typename: "PageInfo";
  /**
   * When paginating forwards, the cursor to continue.
   */
  endCursor: string | null;
  /**
   * When paginating forwards, are there more items?
   */
  hasNextPage: boolean;
  /**
   * When paginating backwards, are there more items?
   */
  hasPreviousPage: boolean;
  /**
   * When paginating backwards, the cursor to continue.
   */
  startCursor: string | null;
}

export interface SegmentQuery_segment_Station_tracks {
  __typename: "TrackConnection";
  /**
   * A list of edges.
   */
  edges: (SegmentQuery_segment_Station_tracks_edges | null)[] | null;
  /**
   * Information to aid in pagination.
   */
  pageInfo: SegmentQuery_segment_Station_tracks_pageInfo;
}

export interface SegmentQuery_segment_Station_stats {
  __typename: "SegmentStats";
  /**
   * The number of seconds in the segment
   */
  duration: number;
  /**
   * The popularity of a segment, larger == more popular
   */
  popularity: number;
  /**
   * The total number of tracks in the segment
   */
  totalCount: number;
}

export interface SegmentQuery_segment_Station {
  __typename: "Station";
  id: string;
  /**
   * The segment name
   */
  name: string;
  tracks: SegmentQuery_segment_Station_tracks;
  /**
   * Stats for this segment
   */
  stats: SegmentQuery_segment_Station_stats;
  description: string;
  color1: string;
  color2: string;
  icon: string;
  state: string;
}

export type SegmentQuery_segment = SegmentQuery_segment_Mix | SegmentQuery_segment_Album | SegmentQuery_segment_Artist | SegmentQuery_segment_Label | SegmentQuery_segment_Playlist | SegmentQuery_segment_Station;

export interface SegmentQuery {
  segment: SegmentQuery_segment | null;
}

export interface SegmentQueryVariables {
  guid: string;
  after?: string | null;
}

import * as React from 'react';

import { compose, graphql, GraphqlQueryControls } from 'react-apollo';
import { withRouter, match } from 'react-router';
import { ClipLoader } from 'halogenium';

import './style.css';
import { SegmentQuery } from './schema';
import { loader } from 'graphql.macro';
import { PretzelColors, TrackList } from '../../Styled';
import { BasicTrack } from '../../Core/Player/Queries/schema';
import { minutesOrHours } from '../../Util';
const segmentGql = loader('./segment.graphql');

interface ParamProps {
  segmentId: string;
}

interface RouterProps {
  match: match<ParamProps>;
}

interface GraphqlProps {
  data: GraphqlQueryControls & SegmentQuery;
}

type Props = GraphqlProps & RouterProps;

interface State {
  loadingMore: boolean;
}

export class SegmentImplementation extends React.Component<Props, State> {

  state: State = {
    loadingMore: false,
  };

  public render() {
    const { data } = this.props;
    const { loadingMore } = this.state;

    if (data.loading) {
      return <ClipLoader color={PretzelColors.brandGreen} size="16px" />
    }
    if (data.error) {
      throw data.error;
    }

    const tracks: BasicTrack[] = data.segment.tracks.edges.map(t => t.node);
    const stats = data.segment.stats;

    return (
      <div style={{overflow: 'auto', padding: '30px'}}>
        There are {stats.totalCount} tracks for a total of {minutesOrHours(stats.duration)} of music in {data.segment.name}
        <TrackList title="Tracks" tracks={tracks} hasMore={false} onMore={() => {}} loading={false} loadingMore={loadingMore} />
      </div>
    );
  }
}

export const Segment = compose(withRouter, graphql(segmentGql, {
  options: (props: RouterProps) => {
    return {
      variables: {
        guid: props.match.params.segmentId
      }
    }
  }
}))(SegmentImplementation);

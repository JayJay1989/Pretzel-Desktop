import * as React from 'react';
import styled from 'styled-components';
import 'instantsearch.css/themes/reset.css';
import { Redirect, Route, Switch } from 'react-router-dom';
import { Box, Grid } from 'grommet';
import { flowRight as compose } from 'lodash';
import { SettingsContext, SettingsKeys, withSettingsContext } from '../../Core/Settings/Settings';
import { Night } from '../../Styled';
import { PlatformContext, withPlatformContext } from '../../Core/Platform';
import { RouteComponentProps, withRouter } from 'react-router';
import { VerticalPlayer } from '../../Core/Player/VerticalPlayer';
import { CompactNav } from '../CompactNav/CompactNav';
import { Settings } from '../Settings/Settings';
import { StationsList } from '../StationsList/StationsList';
import { ArtistsList } from '../ArtistsList/ArtistsList';
import { AlbumsList } from '../AlbumsList/AlbumsList';
import { LabelsList } from '../LabelsList/LabelsList';
import { PlaylistsList } from '../PlaylistsList/PlaylistsList';
import { Search } from '../Search/Search';
import { DevPage } from '../Dev/DevPage';
import createCompactNotAvailable from '../CompactNotAvailable/CompactNotAvailable';
import CompactNotAvailable from '../CompactNotAvailable/CompactNotAvailable';
import backgroundImage from '@pretzel-aux/assets/images/background.jpg';

type PropsFromSettings = Pick<SettingsContext, SettingsKeys.SongRequestQueueVisible>;

interface PropsFromContext {
}

type Props = PropsFromContext & PropsFromSettings & RouteComponentProps;

const Splash = styled(Box)`
  width: 100%;
  height: 100%;
  background-image: url(${backgroundImage});
  background-repeat: no-repeat;
  background-size: cover;
  background-position: 50% 50%;
  align="center"
`;

export class CompactPagePresentation extends React.Component<Props> {
  public render() {
    let areas = [
      { name: 'leftnav', start: [0, 0], end: [0, 0] },
      { name: 'main', start: [1, 0], end: [1, 0] },
    ];
    return (
      <Splash>
        <Box height="463px" width="310px" margin="auto" background={{ color: '#2F3636' }}>
          <Grid
            fill
            justifyContent="center"
            alignContent="center"
            rows={['463px']}
            columns={['60px', '250px']}
            areas={areas}
          >
            <Box gridArea="leftnav" background={{ color: Night.bgSectionsAlt }}>
              <CompactNav />
            </Box>
            <Box overflow="hidden" gridArea="main">
              <Switch>
                <Redirect from="/" to="/home" exact />
                <Route path="/home" component={VerticalPlayer} />
                <Route path="/playlists" component={PlaylistsList} />
                <Route path="/stations" component={StationsList} />
                <Route path="/artists" component={ArtistsList} />
                <Route path="/albums" component={AlbumsList} />
                <Route path="/labels" component={LabelsList} />
                <Route path="/__dev" component={DevPage} />

                <Route path="*" component={CompactNotAvailable} />
              </Switch>
            </Box>
          </Grid>
        </Box>
      </Splash>
    );
  }
}

function mapContextToProps(c: PlatformContext): PropsFromContext {
  return {};
}

function mapSettingsToProps(c: SettingsContext): PropsFromSettings {
  return {
    songRequestQueueVisible: c.songRequestQueueVisible,
  };
}

export const CompactPage = compose(
  withRouter,
  withSettingsContext(mapSettingsToProps),
  withPlatformContext(mapContextToProps),
)(CompactPagePresentation);
